gplink-1.5.0 #1285 (Sep 12 2016)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 5-23-2018  17:04:22


Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW32)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           	CONFIG	MCLRE=ON
                                           	CONFIG	OSC=HS
                                           	CONFIG	WDT=OFF
                                           	CONFIG	LVP=OFF
                                           	CONFIG	DEBUG=OFF
                                           	CONFIG	WDTPS=1


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_pulsos
                                           	global	_tmp
                                           	global	_i
                                           	global	_Contador
                                           	global	_main

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_EnviaComando
                                           	extern	_EnviaDados
                                           	extern	_InicializaLCD
                                           	extern	__mulint
                                           	extern	__divsint
                                           	extern	__modsint

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1

                                           udata_main_0	udata
                                           _tmp	res	2

                                           udata_main_1	udata
                                           _i	res	1

                                           udata_main_2	udata
                                           _pulsos	res	2

                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_main_ivec_0x1_Contador	code	0X000008
                                           ivec_0x1_Contador:
000008   ef1e     goto    0x000c3c         	GOTO	_Contador
00000a   f006

                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	28; main.c	PR2 = 98; //valor para a interrupção do timer2 durar 10,03 ms
00000c   ee0f     lfsr    0x0, 0xfcb       	LFSR	0x00, 0xfcb
00000e   f0cb
000010   0e62     movlw   0x62             	MOVLW	0x62
000012   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	29; main.c	BitSet(TRISA, 4); //seta o bit 4 como entrada
000014   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
000016   f092
000018   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00001a   f000
00001c   8800     bsf     0x00, 0x4, 0x0   	BSF	r0x00, 4
00001e   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
000020   f092
000022   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000024   ffef
                                           ;	.line	30; main.c	InicializaLCD();
000026   ec46     call    0x00108c, 0x0    	CALL	_InicializaLCD
000028   f008
                                           ;	.line	31; main.c	BitSet(T0CON, 6); //timer0 8 bits
00002a   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
00002c   f0d5
00002e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000030   f000
000032   8c00     bsf     0x00, 0x6, 0x0   	BSF	r0x00, 6
000034   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
000036   f0d5
000038   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00003a   ffef
                                           ;	.line	32; main.c	BitSet(T0CON, 5); //habilita o clock externo
00003c   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
00003e   f0d5
000040   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000042   f000
000044   8a00     bsf     0x00, 0x5, 0x0   	BSF	r0x00, 5
000046   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
000048   f0d5
00004a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00004c   ffef
                                           ;	.line	33; main.c	BitSet(T0CON, 4); //habilita a borda de subida
00004e   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
000050   f0d5
000052   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000054   f000
000056   8800     bsf     0x00, 0x4, 0x0   	BSF	r0x00, 4
000058   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
00005a   f0d5
00005c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00005e   ffef
                                           ;	.line	34; main.c	BitSet(T0CON, 3); //não usar prescaler
000060   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
000062   f0d5
000064   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000066   f000
000068   8600     bsf     0x00, 0x3, 0x0   	BSF	r0x00, 3
00006a   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
00006c   f0d5
00006e   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000070   ffef
                                           ;	.line	35; main.c	BitSet(T0CON, 7); //habilita o timer0
000072   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
000074   f0d5
000076   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000078   f000
00007a   8e00     bsf     0x00, 0x7, 0x0   	BSF	r0x00, 7
00007c   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
00007e   f0d5
000080   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000082   ffef
                                           ;	.line	37; main.c	BitSet(T2CON, 6); //postscale 1:16
000084   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
000086   f0ca
000088   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00008a   f000
00008c   8c00     bsf     0x00, 0x6, 0x0   	BSF	r0x00, 6
00008e   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
000090   f0ca
000092   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000094   ffef
                                           ;	.line	38; main.c	BitSet(T2CON, 5); //postscale 1:16
000096   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
000098   f0ca
00009a   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00009c   f000
00009e   8a00     bsf     0x00, 0x5, 0x0   	BSF	r0x00, 5
0000a0   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
0000a2   f0ca
0000a4   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0000a6   ffef
                                           ;	.line	39; main.c	BitSet(T2CON, 4); //postscale 1:16
0000a8   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
0000aa   f0ca
0000ac   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0000ae   f000
0000b0   8800     bsf     0x00, 0x4, 0x0   	BSF	r0x00, 4
0000b2   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
0000b4   f0ca
0000b6   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0000b8   ffef
                                           ;	.line	40; main.c	BitSet(T2CON, 3); //postscale 1:16
0000ba   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
0000bc   f0ca
0000be   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0000c0   f000
0000c2   8600     bsf     0x00, 0x3, 0x0   	BSF	r0x00, 3
0000c4   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
0000c6   f0ca
0000c8   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0000ca   ffef
                                           ;	.line	41; main.c	BitSet(T2CON, 1); //prescaler 16
0000cc   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
0000ce   f0ca
0000d0   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0000d2   f000
0000d4   8200     bsf     0x00, 0x1, 0x0   	BSF	r0x00, 1
0000d6   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
0000d8   f0ca
0000da   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0000dc   ffef
                                           ;	.line	42; main.c	BitSet(T2CON, 2); //habilita o timer2
0000de   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
0000e0   f0ca
0000e2   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0000e4   f000
0000e6   8400     bsf     0x00, 0x2, 0x0   	BSF	r0x00, 2
0000e8   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
0000ea   f0ca
0000ec   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0000ee   ffef
                                           ;	.line	43; main.c	BitSet(PIE1, 1); //habilita o interrrupt do timer2 (dura 10,03 ms)
0000f0   ee0f     lfsr    0x0, 0xf9d       	LFSR	0x00, 0xf9d
0000f2   f09d
0000f4   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0000f6   f000
0000f8   8200     bsf     0x00, 0x1, 0x0   	BSF	r0x00, 1
0000fa   ee0f     lfsr    0x0, 0xf9d       	LFSR	0x00, 0xf9d
0000fc   f09d
0000fe   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000100   ffef
                                           ;	.line	45; main.c	BitSet(INTCON, 7); //habilita interrupt global
000102   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
000104   f0f2
000106   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000108   f000
00010a   8e00     bsf     0x00, 0x7, 0x0   	BSF	r0x00, 7
00010c   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
00010e   f0f2
000110   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000112   ffef
                                           ;	.line	46; main.c	BitSet(INTCON, 6); //habilita interrupt perifericos
000114   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
000116   f0f2
000118   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00011a   f000
00011c   8c00     bsf     0x00, 0x6, 0x0   	BSF	r0x00, 6
00011e   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
000120   f0f2
000122   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000124   ffef
                                           _00126_DS_:
                                           ;	.line	50; main.c	EnviaComando(0x01); //limpar display
000126   0e01     movlw   0x01             	MOVLW	0x01
000128   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00012a   ec42     call    0x001284, 0x0    	CALL	_EnviaComando
00012c   f009
00012e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	51; main.c	EnviaDados('R');
000130   0e52     movlw   0x52             	MOVLW	0x52
000132   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000134   ecf2     call    0x0011e4, 0x0    	CALL	_EnviaDados
000136   f008
000138   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	52; main.c	EnviaDados('P');
00013a   0e50     movlw   0x50             	MOVLW	0x50
00013c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00013e   ecf2     call    0x0011e4, 0x0    	CALL	_EnviaDados
000140   f008
000142   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	53; main.c	EnviaDados('M');
000144   0e4d     movlw   0x4d             	MOVLW	0x4d
000146   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000148   ecf2     call    0x0011e4, 0x0    	CALL	_EnviaDados
00014a   f008
00014c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	54; main.c	EnviaDados(':');
00014e   0e3a     movlw   0x3a             	MOVLW	0x3a
000150   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000152   ecf2     call    0x0011e4, 0x0    	CALL	_EnviaDados
000154   f008
000156   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000158   0100     movlb   0x0              	BANKSEL	(_pulsos + 1)
                                           ;	.line	55; main.c	EnviaDados(((60*pulsos) / 1000) % 10 + 48);
00015a   5187     movf    0x87, 0x0, 0x1   	MOVF	(_pulsos + 1), W, B
00015c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00015e   0100     movlb   0x0              	BANKSEL	_pulsos
000160   5186     movf    0x86, 0x0, 0x1   	MOVF	_pulsos, W, B
000162   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000164   0e00     movlw   0x00             	MOVLW	0x00
000166   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000168   0e3c     movlw   0x3c             	MOVLW	0x3c
00016a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00016c   ec92     call    0x001324, 0x0    	CALL	__mulint
00016e   f009
000170   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000172   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000174   f001
000176   0e04     movlw   0x04             	MOVLW	0x04
000178   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00017a   0e03     movlw   0x03             	MOVLW	0x03
00017c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00017e   0ee8     movlw   0xe8             	MOVLW	0xe8
000180   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000182   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000184   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000186   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000188   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00018a   ecd9     call    0x0009b2, 0x0    	CALL	__divsint
00018c   f004
00018e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000190   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000192   f001
000194   0e04     movlw   0x04             	MOVLW	0x04
000196   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000198   0e00     movlw   0x00             	MOVLW	0x00
00019a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00019c   0e0a     movlw   0x0a             	MOVLW	0x0a
00019e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001a0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0001a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001a4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0001a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001a8   ec50     call    0x000aa0, 0x0    	CALL	__modsint
0001aa   f005
0001ac   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0001ae   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0001b0   f001
0001b2   0e04     movlw   0x04             	MOVLW	0x04
0001b4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0001b6   0e30     movlw   0x30             	MOVLW	0x30
0001b8   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0001ba   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0001bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001be   ecf2     call    0x0011e4, 0x0    	CALL	_EnviaDados
0001c0   f008
0001c2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0001c4   0100     movlb   0x0              	BANKSEL	(_pulsos + 1)
                                           ;	.line	56; main.c	EnviaDados(((60*pulsos) / 100) % 10 + 48);
0001c6   5187     movf    0x87, 0x0, 0x1   	MOVF	(_pulsos + 1), W, B
0001c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001ca   0100     movlb   0x0              	BANKSEL	_pulsos
0001cc   5186     movf    0x86, 0x0, 0x1   	MOVF	_pulsos, W, B
0001ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001d0   0e00     movlw   0x00             	MOVLW	0x00
0001d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001d4   0e3c     movlw   0x3c             	MOVLW	0x3c
0001d6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001d8   ec92     call    0x001324, 0x0    	CALL	__mulint
0001da   f009
0001dc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0001de   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0001e0   f001
0001e2   0e04     movlw   0x04             	MOVLW	0x04
0001e4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0001e6   0e00     movlw   0x00             	MOVLW	0x00
0001e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001ea   0e64     movlw   0x64             	MOVLW	0x64
0001ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001ee   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0001f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001f2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0001f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001f6   ecd9     call    0x0009b2, 0x0    	CALL	__divsint
0001f8   f004
0001fa   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0001fc   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0001fe   f001
000200   0e04     movlw   0x04             	MOVLW	0x04
000202   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000204   0e00     movlw   0x00             	MOVLW	0x00
000206   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000208   0e0a     movlw   0x0a             	MOVLW	0x0a
00020a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00020c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00020e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000210   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000212   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000214   ec50     call    0x000aa0, 0x0    	CALL	__modsint
000216   f005
000218   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00021a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00021c   f001
00021e   0e04     movlw   0x04             	MOVLW	0x04
000220   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000222   0e30     movlw   0x30             	MOVLW	0x30
000224   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000226   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000228   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00022a   ecf2     call    0x0011e4, 0x0    	CALL	_EnviaDados
00022c   f008
00022e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000230   0100     movlb   0x0              	BANKSEL	(_pulsos + 1)
                                           ;	.line	57; main.c	EnviaDados(((60*pulsos) / 10) % 10 + 48);
000232   5187     movf    0x87, 0x0, 0x1   	MOVF	(_pulsos + 1), W, B
000234   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000236   0100     movlb   0x0              	BANKSEL	_pulsos
000238   5186     movf    0x86, 0x0, 0x1   	MOVF	_pulsos, W, B
00023a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00023c   0e00     movlw   0x00             	MOVLW	0x00
00023e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000240   0e3c     movlw   0x3c             	MOVLW	0x3c
000242   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000244   ec92     call    0x001324, 0x0    	CALL	__mulint
000246   f009
000248   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00024a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00024c   f001
00024e   0e04     movlw   0x04             	MOVLW	0x04
000250   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000252   0e00     movlw   0x00             	MOVLW	0x00
000254   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000256   0e0a     movlw   0x0a             	MOVLW	0x0a
000258   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00025a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00025c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00025e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000260   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000262   ecd9     call    0x0009b2, 0x0    	CALL	__divsint
000264   f004
000266   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000268   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00026a   f001
00026c   0e04     movlw   0x04             	MOVLW	0x04
00026e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000270   0e00     movlw   0x00             	MOVLW	0x00
000272   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000274   0e0a     movlw   0x0a             	MOVLW	0x0a
000276   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000278   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00027a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00027c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00027e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000280   ec50     call    0x000aa0, 0x0    	CALL	__modsint
000282   f005
000284   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000286   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000288   f001
00028a   0e04     movlw   0x04             	MOVLW	0x04
00028c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00028e   0e30     movlw   0x30             	MOVLW	0x30
000290   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000292   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000294   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000296   ecf2     call    0x0011e4, 0x0    	CALL	_EnviaDados
000298   f008
00029a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00029c   0100     movlb   0x0              	BANKSEL	(_pulsos + 1)
                                           ;	.line	58; main.c	EnviaDados(((60*pulsos) / 1) % 10 + 48);
00029e   5187     movf    0x87, 0x0, 0x1   	MOVF	(_pulsos + 1), W, B
0002a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002a2   0100     movlb   0x0              	BANKSEL	_pulsos
0002a4   5186     movf    0x86, 0x0, 0x1   	MOVF	_pulsos, W, B
0002a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002a8   0e00     movlw   0x00             	MOVLW	0x00
0002aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002ac   0e3c     movlw   0x3c             	MOVLW	0x3c
0002ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002b0   ec92     call    0x001324, 0x0    	CALL	__mulint
0002b2   f009
0002b4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0002b6   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0002b8   f001
0002ba   0e04     movlw   0x04             	MOVLW	0x04
0002bc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0002be   0e00     movlw   0x00             	MOVLW	0x00
0002c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002c2   0e0a     movlw   0x0a             	MOVLW	0x0a
0002c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002c6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0002c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002ca   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0002cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002ce   ec50     call    0x000aa0, 0x0    	CALL	__modsint
0002d0   f005
0002d2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0002d4   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0002d6   f001
0002d8   0e04     movlw   0x04             	MOVLW	0x04
0002da   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0002dc   0e30     movlw   0x30             	MOVLW	0x30
0002de   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0002e0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0002e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002e4   ecf2     call    0x0011e4, 0x0    	CALL	_EnviaDados
0002e6   f008
0002e8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0002ea   d71d     bra     0x000126         	BRA	_00126_DS_
0002ec   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_main__Contador	code
                                           _Contador:
                                           ;	.line	9; main.c	void Contador(void) __interrupt 1 {
000c3c   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
000c3e   ffe5
000c40   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
000c42   ffe5
000c44   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c46   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
000c48   ffe5
000c4a   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
000c4c   ffe5
000c4e   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
000c50   ffe5
000c52   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
000c54   ffe5
000c56   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
000c58   ffe5
000c5a   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
000c5c   ffe5
000c5e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000c60   ffe5
000c62   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000c64   ffd9
000c66   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000c68   ffe5
000c6a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000c6c   ffe5
                                           ;	.line	12; main.c	if (BitTst(PIR1, 1)) {
000c6e   ee0f     lfsr    0x0, 0xf9e       	LFSR	0x00, 0xf9e
000c70   f09e
000c72   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000c74   f000
000c76   a200     btfss   0x00, 0x1, 0x0   	BTFSS	r0x00, 1
000c78   d028     bra     0x000cca         	BRA	_00109_DS_
                                           ;	.line	14; main.c	tmp += TMR0L;
000c7a   ee0f     lfsr    0x0, 0xfd6       	LFSR	0x00, 0xfd6
000c7c   f0d6
000c7e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000c80   f000
000c82   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000c84   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000c86   0100     movlb   0x0              	BANKSEL	_tmp
000c88   2784     addwf   0x84, 0x1, 0x1   	ADDWF	_tmp, F, B
000c8a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000c8c   0100     movlb   0x0              	BANKSEL	(_tmp + 1)
000c8e   2385     addwfc  0x85, 0x1, 0x1   	ADDWFC	(_tmp + 1), F, B
                                           ;	.line	15; main.c	TMR0L = 0; //zerar o contador de pulsos
000c90   ee0f     lfsr    0x0, 0xfd6       	LFSR	0x00, 0xfd6
000c92   f0d6
000c94   0e00     movlw   0x00             	MOVLW	0x00
000c96   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	16; main.c	BitClr(PIR1, 1); //limpar flag do timer  
000c98   ee0f     lfsr    0x0, 0xf9e       	LFSR	0x00, 0xf9e
000c9a   f09e
000c9c   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000c9e   f000
000ca0   9200     bcf     0x00, 0x1, 0x0   	BCF	r0x00, 1
000ca2   ee0f     lfsr    0x0, 0xf9e       	LFSR	0x00, 0xf9e
000ca4   f09e
000ca6   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000ca8   ffef
000caa   0100     movlb   0x0              	BANKSEL	_i
                                           ;	.line	17; main.c	i++;
000cac   2b8e     incf    0x8e, 0x1, 0x1   	INCF	_i, F, B
000cae   0100     movlb   0x0              	BANKSEL	_i
                                           ;	.line	18; main.c	if (i == 100) {
000cb0   518e     movf    0x8e, 0x0, 0x1   	MOVF	_i, W, B
000cb2   0a64     xorlw   0x64             	XORLW	0x64
000cb4   e10a     bnz     0x000cca         	BNZ	_00109_DS_
                                           _00120_DS_:
000cb6   0100     movlb   0x0              	BANKSEL	_i
                                           ;	.line	19; main.c	i = 0;
000cb8   6b8e     clrf    0x8e, 0x1        	CLRF	_i, B
                                           ;	.line	20; main.c	pulsos = tmp;   //quantidade de pulsos a cada 1,003s
000cba   c084     movff   0x084, 0x086     	MOVFF	_tmp, _pulsos
000cbc   f086
000cbe   c085     movff   0x085, 0x087     	MOVFF	(_tmp + 1), (_pulsos + 1)
000cc0   f087
000cc2   0100     movlb   0x0              	BANKSEL	_tmp
                                           ;	.line	21; main.c	tmp = 0;
000cc4   6b84     clrf    0x84, 0x1        	CLRF	_tmp, B
000cc6   0100     movlb   0x0              	BANKSEL	(_tmp + 1)
000cc8   6b85     clrf    0x85, 0x1        	CLRF	(_tmp + 1), B
                                           _00109_DS_:
000cca   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000ccc   f001
000cce   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000cd0   f000
000cd2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000cd4   ffd9
000cd6   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
000cd8   fffb
000cda   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
000cdc   fffa
000cde   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
000ce0   ffea
000ce2   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
000ce4   ffe9
000ce6   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
000ce8   fff4
000cea   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
000cec   fff3
000cee   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
000cf0   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
000cf2   ffe0
000cf4   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
000cf6   ffd8
000cf8   0010     retfie  0x0              	RETFIE	



                                           ; Statistics:
                                           ; code size:	  930 (0x03a2) bytes ( 0.71%)
                                           ;           	  465 (0x01d1) words
                                           ; udata size:	    5 (0x0005) bytes ( 0.39%)
                                           ; access size:	    2 (0x0002) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW32)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_InicializaAD
                                           	global	_LeValorAD

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_adc__LeValorAD	code
                                           _LeValorAD:
                                           ;	.line	32; adc.c	int LeValorAD(void)
0016fa   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0016fc   ffe5
0016fe   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001700   ffd9
001702   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001704   ffe5
001706   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001708   ffe5
00170a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00170c   ffe5
00170e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001710   ffe5
                                           ;	.line	35; adc.c	ADCON0 |= 0b00000010;	 //inicia conversao
001712   ee0f     lfsr    0x0, 0xfc2       	LFSR	0x00, 0xfc2
001714   f0c2
001716   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001718   f000
00171a   8200     bsf     0x00, 0x1, 0x0   	BSF	r0x00, 1
00171c   ee0f     lfsr    0x0, 0xfc2       	LFSR	0x00, 0xfc2
00171e   f0c2
001720   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001722   ffef
                                           _00110_DS_:
                                           ;	.line	37; adc.c	while(BitTst(ADCON0,1)); // espera terminar a conversão;
001724   ee0f     lfsr    0x0, 0xfc2       	LFSR	0x00, 0xfc2
001726   f0c2
001728   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00172a   f000
00172c   b200     btfsc   0x00, 0x1, 0x0   	BTFSC	r0x00, 1
00172e   d7fa     bra     0x001724         	BRA	_00110_DS_
                                           ;	.line	39; adc.c	ADvalor = ADRESH ; // le o resultado
001730   ee0f     lfsr    0x0, 0xfc4       	LFSR	0x00, 0xfc4
001732   f0c4
001734   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001736   f000
001738   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           ;	.line	40; adc.c	ADvalor <<= 8;
00173a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00173c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00173e   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ;	.line	41; adc.c	ADvalor += ADRESL;
001740   ee0f     lfsr    0x0, 0xfc3       	LFSR	0x00, 0xfc3
001742   f0c3
001744   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001746   f002
001748   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00174a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00174c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00174e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001750   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
                                           ;	.line	42; adc.c	return ADvalor;
001752   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001754   fff3
001756   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001758   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00175a   f003
00175c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00175e   f002
001760   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001762   f001
001764   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001766   f000
001768   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00176a   ffd9
00176c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_adc__InicializaAD	code
                                           _InicializaAD:
                                           ;	.line	23; adc.c	void InicializaAD(void)
001dd2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001dd4   ffe5
001dd6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001dd8   ffd9
001dda   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001ddc   ffe5
                                           ;	.line	25; adc.c	BitSet(TRISA,0); //seta o bit 0 como entrada
001dde   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
001de0   f092
001de2   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001de4   f000
001de6   8000     bsf     0x00, 0x0, 0x0   	BSF	r0x00, 0
001de8   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
001dea   f092
001dec   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001dee   ffef
                                           ;	.line	27; adc.c	ADCON0 = 0b00000001; //seleciona o canal 0 e liga o ad
001df0   ee0f     lfsr    0x0, 0xfc2       	LFSR	0x00, 0xfc2
001df2   f0c2
001df4   0e01     movlw   0x01             	MOVLW	0x01
001df6   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	28; adc.c	ADCON1 = 0b00001110; //apenas AN0 é analogico, a referencia é baseada na fonte
001df8   ee0f     lfsr    0x0, 0xfc1       	LFSR	0x00, 0xfc1
001dfa   f0c1
001dfc   0e0e     movlw   0x0e             	MOVLW	0x0e
001dfe   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	29; adc.c	ADCON2 = 0b10101010; //FOSC /32, Alinhamento à direita e tempo de conv = 12 TAD
001e00   ee0f     lfsr    0x0, 0xfc0       	LFSR	0x00, 0xfc0
001e02   f0c0
001e04   0eaa     movlw   0xaa             	MOVLW	0xaa
001e06   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
001e08   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001e0a   f000
001e0c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001e0e   ffd9
001e10   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  180 (0x00b4) bytes ( 0.14%)
                                           ;           	   90 (0x005a) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    4 (0x0004) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW32)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_MudaDigito
                                           	global	_AtualizaDisplay
                                           	global	_InicializaDisplays

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1

                                           udata_disp7seg_0	udata
                                           _display	res	1

                                           udata_disp7seg_1	udata
                                           _v0	res	1

                                           udata_disp7seg_2	udata
                                           _v1	res	1

                                           udata_disp7seg_3	udata
                                           _v2	res	1

                                           udata_disp7seg_4	udata
                                           _v3	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_disp7seg__InicializaDisplays	code
                                           _InicializaDisplays:
                                           ;	.line	73; disp7seg.c	void InicializaDisplays(void)
0017e2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0017e4   ffe5
0017e6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0017e8   ffd9
0017ea   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0017ec   ffe5
                                           ;	.line	76; disp7seg.c	BitClr(TRISA,2);
0017ee   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
0017f0   f092
0017f2   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0017f4   f000
0017f6   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
0017f8   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
0017fa   f092
0017fc   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0017fe   ffef
                                           ;	.line	77; disp7seg.c	BitClr(TRISA,5);
001800   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
001802   f092
001804   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001806   f000
001808   9a00     bcf     0x00, 0x5, 0x0   	BCF	r0x00, 5
00180a   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
00180c   f092
00180e   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001810   ffef
                                           ;	.line	78; disp7seg.c	BitClr(TRISE,0);
001812   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
001814   f096
001816   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001818   f000
00181a   9000     bcf     0x00, 0x0, 0x0   	BCF	r0x00, 0
00181c   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
00181e   f096
001820   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001822   ffef
                                           ;	.line	79; disp7seg.c	BitClr(TRISE,2);
001824   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
001826   f096
001828   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00182a   f000
00182c   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
00182e   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
001830   f096
001832   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001834   ffef
                                           ;	.line	80; disp7seg.c	ADCON1 = 0x0E; //apenas AN0 é analogico, a referencia é baseada na fonte
001836   ee0f     lfsr    0x0, 0xfc1       	LFSR	0x00, 0xfc1
001838   f0c1
00183a   0e0e     movlw   0x0e             	MOVLW	0x0e
00183c   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	81; disp7seg.c	TRISD = 0x00;	//Porta de dados
00183e   ee0f     lfsr    0x0, 0xf95       	LFSR	0x00, 0xf95
001840   f095
001842   0e00     movlw   0x00             	MOVLW	0x00
001844   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
001846   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001848   f000
00184a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00184c   ffd9
00184e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_disp7seg__AtualizaDisplay	code
                                           _AtualizaDisplay:
                                           ;	.line	32; disp7seg.c	void AtualizaDisplay(void)
00048c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00048e   ffe5
000490   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000492   ffd9
000494   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000496   ffe5
000498   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00049a   ffe5
00049c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00049e   ffe5
                                           ;	.line	35; disp7seg.c	PORTA = 0x00;
0004a0   ee0f     lfsr    0x0, 0xf80       	LFSR	0x00, 0xf80
0004a2   f080
0004a4   0e00     movlw   0x00             	MOVLW	0x00
0004a6   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	36; disp7seg.c	PORTE = 0x00;
0004a8   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0004aa   f084
0004ac   0e00     movlw   0x00             	MOVLW	0x00
0004ae   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	38; disp7seg.c	PORTD = 0x00;
0004b0   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
0004b2   f083
0004b4   0e00     movlw   0x00             	MOVLW	0x00
0004b6   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	40; disp7seg.c	switch(display) //liga apenas o display da vez
0004b8   0e04     movlw   0x04             	MOVLW	0x04
0004ba   0100     movlb   0x0              	BANKSEL	_display
0004bc   5d8f     subwf   0x8f, 0x0, 0x1   	SUBWF	_display, W, B
0004be   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0004c0   d0a7     bra     0x000610         	BRA	_00141_DS_
0004c2   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
0004c4   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
0004c6   0100     movlb   0x0              	BANKSEL	_display
0004c8   358f     rlcf    0x8f, 0x0, 0x1   	RLCF	_display, W, B
0004ca   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
0004cc   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
0004ce   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
0004d0   0bfc     andlw   0xfc             	ANDLW	0xfc
0004d2   0fe2     addlw   0xe2             	ADDLW	LOW(_00149_DS_)
0004d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004d6   0e04     movlw   0x04             	MOVLW	HIGH(_00149_DS_)
0004d8   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
0004da   0e00     movlw   0x00             	MOVLW	UPPER(_00149_DS_)
0004dc   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
0004de   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0004e0   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00149_DS_:
0004e2   ef79     goto    0x0004f2         	GOTO	_00137_DS_
0004e4   f002
0004e6   ef9d     goto    0x00053a         	GOTO	_00138_DS_
0004e8   f002
0004ea   efc1     goto    0x000582         	GOTO	_00139_DS_
0004ec   f002
0004ee   efe5     goto    0x0005ca         	GOTO	_00140_DS_
0004f0   f002
                                           _00137_DS_:
                                           ;	.line	43; disp7seg.c	PORTD = valor[v0];
0004f2   0ef8     movlw   0xf8             	MOVLW	LOW(_valor)
0004f4   0100     movlb   0x0              	BANKSEL	_v0
0004f6   2590     addwf   0x90, 0x0, 0x1   	ADDWF	_v0, W, B
0004f8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0004fa   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0004fc   0e1f     movlw   0x1f             	MOVLW	HIGH(_valor)
0004fe   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000500   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000502   0e00     movlw   0x00             	MOVLW	UPPER(_valor)
000504   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
000506   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
000508   fff6
00050a   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
00050c   fff7
00050e   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
000510   fff8
000512   0009     tblrd*+                  	TBLRD*+	
000514   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
000516   f000
000518   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
00051a   f083
00051c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00051e   ffef
                                           ;	.line	44; disp7seg.c	BitSet(PORTA,5);
000520   ee0f     lfsr    0x0, 0xf80       	LFSR	0x00, 0xf80
000522   f080
000524   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000526   f000
000528   8a00     bsf     0x00, 0x5, 0x0   	BSF	r0x00, 5
00052a   ee0f     lfsr    0x0, 0xf80       	LFSR	0x00, 0xf80
00052c   f080
00052e   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000530   ffef
                                           ;	.line	45; disp7seg.c	display = 1;
000532   0e01     movlw   0x01             	MOVLW	0x01
000534   0100     movlb   0x0              	BANKSEL	_display
000536   6f8f     movwf   0x8f, 0x1        	MOVWF	_display, B
                                           ;	.line	46; disp7seg.c	break;
000538   d06d     bra     0x000614         	BRA	_00143_DS_
                                           _00138_DS_:
                                           ;	.line	49; disp7seg.c	PORTD = valor[v1];
00053a   0ef8     movlw   0xf8             	MOVLW	LOW(_valor)
00053c   0100     movlb   0x0              	BANKSEL	_v1
00053e   2591     addwf   0x91, 0x0, 0x1   	ADDWF	_v1, W, B
000540   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000542   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000544   0e1f     movlw   0x1f             	MOVLW	HIGH(_valor)
000546   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000548   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00054a   0e00     movlw   0x00             	MOVLW	UPPER(_valor)
00054c   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00054e   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
000550   fff6
000552   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
000554   fff7
000556   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
000558   fff8
00055a   0009     tblrd*+                  	TBLRD*+	
00055c   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
00055e   f000
000560   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
000562   f083
000564   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000566   ffef
                                           ;	.line	50; disp7seg.c	BitSet(PORTA,2);
000568   ee0f     lfsr    0x0, 0xf80       	LFSR	0x00, 0xf80
00056a   f080
00056c   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00056e   f000
000570   8400     bsf     0x00, 0x2, 0x0   	BSF	r0x00, 2
000572   ee0f     lfsr    0x0, 0xf80       	LFSR	0x00, 0xf80
000574   f080
000576   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000578   ffef
                                           ;	.line	51; disp7seg.c	display = 2;
00057a   0e02     movlw   0x02             	MOVLW	0x02
00057c   0100     movlb   0x0              	BANKSEL	_display
00057e   6f8f     movwf   0x8f, 0x1        	MOVWF	_display, B
                                           ;	.line	52; disp7seg.c	break;
000580   d049     bra     0x000614         	BRA	_00143_DS_
                                           _00139_DS_:
                                           ;	.line	55; disp7seg.c	PORTD = valor[v2];
000582   0ef8     movlw   0xf8             	MOVLW	LOW(_valor)
000584   0100     movlb   0x0              	BANKSEL	_v2
000586   2592     addwf   0x92, 0x0, 0x1   	ADDWF	_v2, W, B
000588   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00058a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00058c   0e1f     movlw   0x1f             	MOVLW	HIGH(_valor)
00058e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000590   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000592   0e00     movlw   0x00             	MOVLW	UPPER(_valor)
000594   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
000596   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
000598   fff6
00059a   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
00059c   fff7
00059e   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
0005a0   fff8
0005a2   0009     tblrd*+                  	TBLRD*+	
0005a4   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
0005a6   f000
0005a8   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
0005aa   f083
0005ac   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0005ae   ffef
                                           ;	.line	56; disp7seg.c	BitSet(PORTE,0);
0005b0   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0005b2   f084
0005b4   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0005b6   f000
0005b8   8000     bsf     0x00, 0x0, 0x0   	BSF	r0x00, 0
0005ba   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0005bc   f084
0005be   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0005c0   ffef
                                           ;	.line	57; disp7seg.c	display = 3;
0005c2   0e03     movlw   0x03             	MOVLW	0x03
0005c4   0100     movlb   0x0              	BANKSEL	_display
0005c6   6f8f     movwf   0x8f, 0x1        	MOVWF	_display, B
                                           ;	.line	58; disp7seg.c	break;
0005c8   d025     bra     0x000614         	BRA	_00143_DS_
                                           _00140_DS_:
                                           ;	.line	61; disp7seg.c	PORTD = valor[v3];
0005ca   0ef8     movlw   0xf8             	MOVLW	LOW(_valor)
0005cc   0100     movlb   0x0              	BANKSEL	_v3
0005ce   2593     addwf   0x93, 0x0, 0x1   	ADDWF	_v3, W, B
0005d0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0005d2   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0005d4   0e1f     movlw   0x1f             	MOVLW	HIGH(_valor)
0005d6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0005d8   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0005da   0e00     movlw   0x00             	MOVLW	UPPER(_valor)
0005dc   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0005de   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
0005e0   fff6
0005e2   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
0005e4   fff7
0005e6   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
0005e8   fff8
0005ea   0009     tblrd*+                  	TBLRD*+	
0005ec   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
0005ee   f000
0005f0   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
0005f2   f083
0005f4   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0005f6   ffef
                                           ;	.line	62; disp7seg.c	BitSet(PORTE,2);
0005f8   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0005fa   f084
0005fc   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0005fe   f000
000600   8400     bsf     0x00, 0x2, 0x0   	BSF	r0x00, 2
000602   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
000604   f084
000606   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000608   ffef
00060a   0100     movlb   0x0              	BANKSEL	_display
                                           ;	.line	63; disp7seg.c	display = 0;
00060c   6b8f     clrf    0x8f, 0x1        	CLRF	_display, B
                                           ;	.line	64; disp7seg.c	break;
00060e   d002     bra     0x000614         	BRA	_00143_DS_
                                           _00141_DS_:
000610   0100     movlb   0x0              	BANKSEL	_display
                                           ;	.line	67; disp7seg.c	display = 0;
000612   6b8f     clrf    0x8f, 0x1        	CLRF	_display, B
                                           _00143_DS_:
                                           ;	.line	69; disp7seg.c	}
000614   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000616   f002
000618   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00061a   f001
00061c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00061e   f000
000620   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000622   ffd9
000624   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_disp7seg__MudaDigito	code
                                           _MudaDigito:
                                           ;	.line	11; disp7seg.c	void MudaDigito(char val, char pos)
001b94   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001b96   ffe5
001b98   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001b9a   ffd9
001b9c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001b9e   ffe5
001ba0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001ba2   ffe5
001ba4   0e02     movlw   0x02             	MOVLW	0x02
001ba6   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001ba8   f000
001baa   0e03     movlw   0x03             	MOVLW	0x03
001bac   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001bae   f001
                                           ;	.line	13; disp7seg.c	if (pos == 0)
001bb0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001bb2   e102     bnz     0x001bb8         	BNZ	_00106_DS_
                                           ;	.line	15; disp7seg.c	v0 = val;
001bb4   c000     movff   0x000, 0x090     	MOVFF	r0x00, _v0
001bb6   f090
                                           _00106_DS_:
                                           ;	.line	17; disp7seg.c	if (pos == 1)
001bb8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001bba   0a01     xorlw   0x01             	XORLW	0x01
001bbc   e102     bnz     0x001bc2         	BNZ	_00108_DS_
                                           ;	.line	19; disp7seg.c	v1 = val;
001bbe   c000     movff   0x000, 0x091     	MOVFF	r0x00, _v1
001bc0   f091
                                           _00108_DS_:
                                           ;	.line	21; disp7seg.c	if (pos == 2)
001bc2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001bc4   0a02     xorlw   0x02             	XORLW	0x02
001bc6   e102     bnz     0x001bcc         	BNZ	_00110_DS_
                                           ;	.line	23; disp7seg.c	v2 = val;
001bc8   c000     movff   0x000, 0x092     	MOVFF	r0x00, _v2
001bca   f092
                                           _00110_DS_:
                                           ;	.line	25; disp7seg.c	if (pos == 3)
001bcc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001bce   0a03     xorlw   0x03             	XORLW	0x03
001bd0   e102     bnz     0x001bd6         	BNZ	_00113_DS_
                                           ;	.line	27; disp7seg.c	v3 = val;
001bd2   c000     movff   0x000, 0x093     	MOVFF	r0x00, _v3
001bd4   f093
                                           _00113_DS_:
001bd6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001bd8   f001
001bda   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001bdc   f000
001bde   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001be0   ffd9
001be2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block for Ival
                                           	code
                                           _valor:
001ff8   063f     decf    0x3f, 0x1, 0x0   	DB	0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c
001ffa   4f5b     dcfsnz  0x5b, 0x1, 0x1   
001ffc   6d66     negf    0x66, 0x1        
001ffe   077d     decf    0x7d, 0x1, 0x1   
002000   6f7f     movwf   0x7f, 0x1        
002002   7c77     btg     0x77, 0x6, 0x0   
002004   5e39     subwf   0x39, 0x1, 0x0   	DB	0x39, 0x5e, 0x79, 0x71
002006   7179     btg     0x79, 0x0, 0x1   


                                           ; Statistics:
                                           ; code size:	  606 (0x025e) bytes ( 0.46%)
                                           ;           	  303 (0x012f) words
                                           ; udata size:	    5 (0x0005) bytes ( 0.39%)
                                           ; access size:	    3 (0x0003) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW32)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_EnviaComando
                                           	global	_EnviaDados
                                           	global	_InicializaLCD
                                           	global	_Delay40us
                                           	global	_Delay2ms

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_lcd__InicializaLCD	code
                                           _InicializaLCD:
                                           ;	.line	75; lcd.c	void InicializaLCD(void)
00108c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00108e   ffe5
001090   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001092   ffd9
001094   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001096   ffe5
                                           ;	.line	80; lcd.c	Delay2ms();
001098   ec5e     call    0x001ebc, 0x0    	CALL	_Delay2ms
00109a   f00f
                                           ;	.line	81; lcd.c	Delay2ms();
00109c   ec5e     call    0x001ebc, 0x0    	CALL	_Delay2ms
00109e   f00f
                                           ;	.line	82; lcd.c	Delay2ms();
0010a0   ec5e     call    0x001ebc, 0x0    	CALL	_Delay2ms
0010a2   f00f
                                           ;	.line	83; lcd.c	Delay2ms();
0010a4   ec5e     call    0x001ebc, 0x0    	CALL	_Delay2ms
0010a6   f00f
                                           ;	.line	84; lcd.c	Delay2ms();
0010a8   ec5e     call    0x001ebc, 0x0    	CALL	_Delay2ms
0010aa   f00f
                                           ;	.line	87; lcd.c	BitClr(TRISE,RS);	//RS
0010ac   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
0010ae   f096
0010b0   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0010b2   f000
0010b4   9000     bcf     0x00, 0x0, 0x0   	BCF	r0x00, 0
0010b6   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
0010b8   f096
0010ba   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0010bc   ffef
                                           ;	.line	88; lcd.c	BitClr(TRISE,EN);	//EN
0010be   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
0010c0   f096
0010c2   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0010c4   f000
0010c6   9200     bcf     0x00, 0x1, 0x0   	BCF	r0x00, 1
0010c8   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
0010ca   f096
0010cc   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0010ce   ffef
                                           ;	.line	89; lcd.c	BitClr(TRISE,RW);	//RW
0010d0   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
0010d2   f096
0010d4   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0010d6   f000
0010d8   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
0010da   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
0010dc   f096
0010de   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0010e0   ffef
                                           ;	.line	90; lcd.c	TRISD = 0x00;		//dados
0010e2   ee0f     lfsr    0x0, 0xf95       	LFSR	0x00, 0xf95
0010e4   f095
0010e6   0e00     movlw   0x00             	MOVLW	0x00
0010e8   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	91; lcd.c	ADCON1 = 0b00001110;	//apenas
0010ea   ee0f     lfsr    0x0, 0xfc1       	LFSR	0x00, 0xfc1
0010ec   f0c1
0010ee   0e0e     movlw   0x0e             	MOVLW	0x0e
0010f0   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	94; lcd.c	EnviaComando(0x38);	//8bits, 2 linhas, 5x8
0010f2   0e38     movlw   0x38             	MOVLW	0x38
0010f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010f6   ec42     call    0x001284, 0x0    	CALL	_EnviaComando
0010f8   f009
0010fa   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	95; lcd.c	EnviaComando(0x06);	//modo incremental
0010fc   0e06     movlw   0x06             	MOVLW	0x06
0010fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001100   ec42     call    0x001284, 0x0    	CALL	_EnviaComando
001102   f009
001104   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	96; lcd.c	EnviaComando(0x0C);	//display e cursor on, com blink
001106   0e0c     movlw   0x0c             	MOVLW	0x0c
001108   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00110a   ec42     call    0x001284, 0x0    	CALL	_EnviaComando
00110c   f009
00110e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	97; lcd.c	EnviaComando(0x03);	//zera tudo
001110   0e03     movlw   0x03             	MOVLW	0x03
001112   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001114   ec42     call    0x001284, 0x0    	CALL	_EnviaComando
001116   f009
001118   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	98; lcd.c	EnviaComando(0x01);	//limpar display
00111a   0e01     movlw   0x01             	MOVLW	0x01
00111c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00111e   ec42     call    0x001284, 0x0    	CALL	_EnviaComando
001120   f009
001122   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	99; lcd.c	EnviaComando(0x80);	//posição inicial
001124   0e80     movlw   0x80             	MOVLW	0x80
001126   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001128   ec42     call    0x001284, 0x0    	CALL	_EnviaComando
00112a   f009
00112c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00112e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001130   f000
001132   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001134   ffd9
001136   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_lcd__EnviaDados	code
                                           _EnviaDados:
                                           ;	.line	60; lcd.c	void EnviaDados(unsigned char valor)
0011e4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0011e6   ffe5
0011e8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0011ea   ffd9
0011ec   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0011ee   ffe5
0011f0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0011f2   ffe5
0011f4   0e02     movlw   0x02             	MOVLW	0x02
0011f6   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0011f8   f000
                                           ;	.line	62; lcd.c	BitSet(PORTE,RS);	//dados
0011fa   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0011fc   f084
0011fe   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001200   f001
001202   8001     bsf     0x01, 0x0, 0x0   	BSF	r0x01, 0
001204   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001206   f084
001208   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
00120a   ffef
                                           ;	.line	63; lcd.c	BitClr(PORTE,RW);	// habilita escrita
00120c   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
00120e   f084
001210   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001212   f001
001214   9401     bcf     0x01, 0x2, 0x0   	BCF	r0x01, 2
001216   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001218   f084
00121a   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
00121c   ffef
                                           ;	.line	66; lcd.c	PORTD = valor;
00121e   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
001220   f083
001222   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001224   ffef
                                           ;	.line	67; lcd.c	BitSet(PORTE,EN);//habilita leitura
001226   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001228   f084
00122a   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00122c   f000
00122e   8200     bsf     0x00, 0x1, 0x0   	BSF	r0x00, 1
001230   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001232   f084
001234   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001236   ffef
                                           ;	.line	68; lcd.c	Delay40us();
001238   ec8f     call    0x001f1e, 0x0    	CALL	_Delay40us
00123a   f00f
                                           ;	.line	69; lcd.c	BitClr(PORTE,EN);//termina leitura
00123c   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
00123e   f084
001240   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001242   f000
001244   9200     bcf     0x00, 0x1, 0x0   	BCF	r0x00, 1
001246   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001248   f084
00124a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00124c   ffef
                                           ;	.line	70; lcd.c	BitClr(PORTE,RS);	//deixa em nivel baixo
00124e   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001250   f084
001252   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001254   f000
001256   9000     bcf     0x00, 0x0, 0x0   	BCF	r0x00, 0
001258   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
00125a   f084
00125c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00125e   ffef
                                           ;	.line	71; lcd.c	BitClr(PORTE,RW);	//deixa em nivel baixo
001260   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001262   f084
001264   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001266   f000
001268   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
00126a   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
00126c   f084
00126e   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001270   ffef
                                           ;	.line	72; lcd.c	Delay40us();
001272   ec8f     call    0x001f1e, 0x0    	CALL	_Delay40us
001274   f00f
001276   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001278   f001
00127a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00127c   f000
00127e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001280   ffd9
001282   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_lcd__EnviaComando	code
                                           _EnviaComando:
                                           ;	.line	46; lcd.c	void EnviaComando(unsigned char cmd)
001284   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001286   ffe5
001288   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00128a   ffd9
00128c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00128e   ffe5
001290   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001292   ffe5
001294   0e02     movlw   0x02             	MOVLW	0x02
001296   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001298   f000
                                           ;	.line	48; lcd.c	BitClr(PORTE,RS);	//comando
00129a   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
00129c   f084
00129e   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0012a0   f001
0012a2   9001     bcf     0x01, 0x0, 0x0   	BCF	r0x01, 0
0012a4   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0012a6   f084
0012a8   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
0012aa   ffef
                                           ;	.line	49; lcd.c	BitClr(PORTE,RW);	// habilita escrita
0012ac   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0012ae   f084
0012b0   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0012b2   f001
0012b4   9401     bcf     0x01, 0x2, 0x0   	BCF	r0x01, 2
0012b6   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0012b8   f084
0012ba   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
0012bc   ffef
                                           ;	.line	51; lcd.c	PORTD = cmd;
0012be   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
0012c0   f083
0012c2   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0012c4   ffef
                                           ;	.line	52; lcd.c	BitSet(PORTE,EN);//habilita leitura
0012c6   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0012c8   f084
0012ca   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0012cc   f000
0012ce   8200     bsf     0x00, 0x1, 0x0   	BSF	r0x00, 1
0012d0   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0012d2   f084
0012d4   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0012d6   ffef
                                           ;	.line	53; lcd.c	Delay2ms();
0012d8   ec5e     call    0x001ebc, 0x0    	CALL	_Delay2ms
0012da   f00f
                                           ;	.line	54; lcd.c	BitClr(PORTE,EN);//termina leitura
0012dc   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0012de   f084
0012e0   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0012e2   f000
0012e4   9200     bcf     0x00, 0x1, 0x0   	BCF	r0x00, 1
0012e6   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0012e8   f084
0012ea   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0012ec   ffef
                                           ;	.line	55; lcd.c	BitClr(PORTE,RS);	//deixa em nivel baixo
0012ee   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0012f0   f084
0012f2   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0012f4   f000
0012f6   9000     bcf     0x00, 0x0, 0x0   	BCF	r0x00, 0
0012f8   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0012fa   f084
0012fc   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0012fe   ffef
                                           ;	.line	56; lcd.c	BitClr(PORTE,RW);	//deixa em nivel baixo
001300   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
001302   f084
001304   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001306   f000
001308   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
00130a   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
00130c   f084
00130e   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001310   ffef
                                           ;	.line	57; lcd.c	Delay2ms();
001312   ec5e     call    0x001ebc, 0x0    	CALL	_Delay2ms
001314   f00f
001316   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001318   f001
00131a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00131c   f000
00131e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001320   ffd9
001322   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_lcd__Delay2ms	code
                                           _Delay2ms:
                                           ;	.line	36; lcd.c	void Delay2ms(void)
001ebc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001ebe   ffe5
001ec0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001ec2   ffd9
001ec4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001ec6   ffe5
001ec8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001eca   ffe5
                                           ;	.line	39; lcd.c	for(i=0; i < 200; i++)
001ecc   0ec8     movlw   0xc8             	MOVLW	0xc8
001ece   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00117_DS_:
                                           ;	.line	41; lcd.c	Delay40us();
001ed0   ec8f     call    0x001f1e, 0x0    	CALL	_Delay40us
001ed2   f00f
001ed4   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
001ed6   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001ed8   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
001eda   f000
                                           ;	.line	39; lcd.c	for(i=0; i < 200; i++)
001edc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001ede   e1f8     bnz     0x001ed0         	BNZ	_00117_DS_
001ee0   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001ee2   f001
001ee4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001ee6   f000
001ee8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001eea   ffd9
001eec   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_lcd__Delay40us	code
                                           _Delay40us:
                                           ;	.line	28; lcd.c	void Delay40us(void)
001f1e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001f20   ffe5
001f22   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001f24   ffd9
001f26   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001f28   ffe5
001f2a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001f2c   ffe5
                                           ;	.line	33; lcd.c	for(i=0; i < 25; i++); //3 + 3 * 25 = 78
001f2e   0e19     movlw   0x19             	MOVLW	0x19
001f30   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00108_DS_:
001f32   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
001f34   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001f36   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
001f38   f000
001f3a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001f3c   e1fa     bnz     0x001f32         	BNZ	_00108_DS_
001f3e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001f40   f001
001f42   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001f44   f000
001f46   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001f48   ffd9
001f4a   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  588 (0x024c) bytes ( 0.45%)
                                           ;           	  294 (0x0126) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    2 (0x0002) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW32)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_SetaPWM1
                                           	global	_SetaPWM2
                                           	global	_SetaFreqPWM
                                           	global	_InicializaPWM

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__mulint
                                           	extern	__divuint
                                           	extern	__divslong

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_pwm__InicializaPWM	code
                                           _InicializaPWM:
                                           ;	.line	59; pwm.c	void InicializaPWM(void)
00157e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001580   ffe5
001582   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001584   ffd9
001586   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001588   ffe5
                                           ;	.line	61; pwm.c	BitClr(TRISC,1);//configura os pinos correspondentes como saídas
00158a   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
00158c   f094
00158e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001590   f000
001592   9200     bcf     0x00, 0x1, 0x0   	BCF	r0x00, 1
001594   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001596   f094
001598   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00159a   ffef
                                           ;	.line	62; pwm.c	BitClr(TRISC,2);
00159c   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
00159e   f094
0015a0   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0015a2   f000
0015a4   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
0015a6   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0015a8   f094
0015aa   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0015ac   ffef
                                           ;	.line	64; pwm.c	T2CON |= 0b00000011; //configura o prescale do timer 2 para 1:16
0015ae   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
0015b0   f0ca
0015b2   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0015b4   f000
0015b6   0e03     movlw   0x03             	MOVLW	0x03
0015b8   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
0015ba   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
0015bc   f0ca
0015be   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0015c0   ffef
                                           ;	.line	65; pwm.c	BitSet(T2CON,2); //Liga o timer 2
0015c2   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
0015c4   f0ca
0015c6   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0015c8   f000
0015ca   8400     bsf     0x00, 0x2, 0x0   	BSF	r0x00, 2
0015cc   ee0f     lfsr    0x0, 0xfca       	LFSR	0x00, 0xfca
0015ce   f0ca
0015d0   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0015d2   ffef
                                           ;	.line	68; pwm.c	CCP1CON |= 0b00001100;	//configura CCP1 como um PWM
0015d4   ee0f     lfsr    0x0, 0xfbd       	LFSR	0x00, 0xfbd
0015d6   f0bd
0015d8   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0015da   f000
0015dc   0e0c     movlw   0x0c             	MOVLW	0x0c
0015de   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
0015e0   ee0f     lfsr    0x0, 0xfbd       	LFSR	0x00, 0xfbd
0015e2   f0bd
0015e4   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0015e6   ffef
                                           ;	.line	69; pwm.c	CCP2CON |= 0b00001100;	//configura CCP2 como um PWM
0015e8   ee0f     lfsr    0x0, 0xfba       	LFSR	0x00, 0xfba
0015ea   f0ba
0015ec   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0015ee   f000
0015f0   0e0c     movlw   0x0c             	MOVLW	0x0c
0015f2   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
0015f4   ee0f     lfsr    0x0, 0xfba       	LFSR	0x00, 0xfba
0015f6   f0ba
0015f8   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0015fa   ffef
0015fc   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0015fe   f000
001600   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001602   ffd9
001604   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pwm__SetaFreqPWM	code
                                           _SetaFreqPWM:
                                           ;	.line	52; pwm.c	void SetaFreqPWM(unsigned int freq)
001606   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001608   ffe5
00160a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00160c   ffd9
00160e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001610   ffe5
001612   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001614   ffe5
001616   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001618   ffe5
00161a   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00161c   ffe5
00161e   0e02     movlw   0x02             	MOVLW	0x02
001620   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001622   f000
001624   0e03     movlw   0x03             	MOVLW	0x03
001626   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001628   f001
                                           ;	.line	56; pwm.c	PR2 = (125000/(freq)) - 1;
00162a   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00162c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00162e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001630   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001632   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001634   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001636   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001638   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00163a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00163c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00163e   0e00     movlw   0x00             	MOVLW	0x00
001640   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001642   0e01     movlw   0x01             	MOVLW	0x01
001644   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001646   0ee8     movlw   0xe8             	MOVLW	0xe8
001648   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00164a   0e48     movlw   0x48             	MOVLW	0x48
00164c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00164e   ec77     call    0x0002ee, 0x0    	CALL	__divslong
001650   f001
001652   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001654   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001656   f001
001658   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00165a   f002
00165c   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00165e   f003
001660   0e08     movlw   0x08             	MOVLW	0x08
001662   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001664   0600     decf    0x00, 0x1, 0x0   	DECF	r0x00, F
001666   ee0f     lfsr    0x0, 0xfcb       	LFSR	0x00, 0xfcb
001668   f0cb
00166a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00166c   ffef
00166e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001670   f003
001672   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001674   f002
001676   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001678   f001
00167a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00167c   f000
00167e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001680   ffd9
001682   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pwm__SetaPWM2	code
                                           _SetaPWM2:
                                           ;	.line	40; pwm.c	void SetaPWM2(unsigned char porcento)
000cfa   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000cfc   ffe5
000cfe   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000d00   ffd9
000d02   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000d04   ffe5
000d06   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000d08   ffe5
000d0a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000d0c   ffe5
000d0e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
000d10   ffe5
000d12   0e02     movlw   0x02             	MOVLW	0x02
000d14   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000d16   f000
                                           ;	.line	42; pwm.c	unsigned int val = ((unsigned int)porcento) *(PR2+1);
000d18   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000d1a   ee0f     lfsr    0x0, 0xfcb       	LFSR	0x00, 0xfcb
000d1c   f0cb
000d1e   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000d20   f002
000d22   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000d24   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
000d26   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
000d28   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000d2a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d2c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000d2e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d30   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000d32   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d34   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000d36   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d38   ec92     call    0x001324, 0x0    	CALL	__mulint
000d3a   f009
000d3c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000d3e   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000d40   f001
000d42   0e04     movlw   0x04             	MOVLW	0x04
000d44   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	43; pwm.c	val /= 25;
000d46   0e00     movlw   0x00             	MOVLW	0x00
000d48   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d4a   0e19     movlw   0x19             	MOVLW	0x19
000d4c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d4e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000d50   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d52   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000d54   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d56   ecee     call    0x000fdc, 0x0    	CALL	__divuint
000d58   f007
000d5a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000d5c   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000d5e   f001
000d60   0e04     movlw   0x04             	MOVLW	0x04
000d62   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	45; pwm.c	val &= 0x03ff;
000d64   0e03     movlw   0x03             	MOVLW	0x03
000d66   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ;	.line	47; pwm.c	CCPR2L = val >> 2;
000d68   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000d6a   3001     rrcf    0x01, 0x0, 0x0   	RRCF	r0x01, W
000d6c   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000d6e   3000     rrcf    0x00, 0x0, 0x0   	RRCF	r0x00, W
000d70   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000d72   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000d74   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
000d76   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
000d78   ee0f     lfsr    0x0, 0xfbb       	LFSR	0x00, 0xfbb
000d7a   f0bb
000d7c   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000d7e   ffef
                                           ;	.line	49; pwm.c	CCP2CON |= (val & 0x0003) << 4;
000d80   ee0f     lfsr    0x0, 0xfba       	LFSR	0x00, 0xfba
000d82   f0ba
000d84   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000d86   f002
000d88   0e03     movlw   0x03             	MOVLW	0x03
000d8a   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
000d8c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000d8e   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
000d90   0bf0     andlw   0xf0             	ANDLW	0xf0
000d92   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000d94   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000d96   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
000d98   ee0f     lfsr    0x0, 0xfba       	LFSR	0x00, 0xfba
000d9a   f0ba
000d9c   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000d9e   ffef
000da0   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
000da2   f003
000da4   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000da6   f002
000da8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000daa   f001
000dac   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000dae   f000
000db0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000db2   ffd9
000db4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pwm__SetaPWM1	code
                                           _SetaPWM1:
                                           ;	.line	23; pwm.c	void SetaPWM1(unsigned char porcento)
000db6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000db8   ffe5
000dba   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000dbc   ffd9
000dbe   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000dc0   ffe5
000dc2   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000dc4   ffe5
000dc6   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000dc8   ffe5
000dca   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
000dcc   ffe5
000dce   0e02     movlw   0x02             	MOVLW	0x02
000dd0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000dd2   f000
                                           ;	.line	30; pwm.c	unsigned int val = ((unsigned int)porcento) *(PR2+1);
000dd4   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000dd6   ee0f     lfsr    0x0, 0xfcb       	LFSR	0x00, 0xfcb
000dd8   f0cb
000dda   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000ddc   f002
000dde   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000de0   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
000de2   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
000de4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000de6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000de8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000dea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dec   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000dee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000df0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000df2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000df4   ec92     call    0x001324, 0x0    	CALL	__mulint
000df6   f009
000df8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000dfa   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000dfc   f001
000dfe   0e04     movlw   0x04             	MOVLW	0x04
000e00   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	31; pwm.c	val = val / 25;
000e02   0e00     movlw   0x00             	MOVLW	0x00
000e04   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e06   0e19     movlw   0x19             	MOVLW	0x19
000e08   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e0a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000e0c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e0e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000e10   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e12   ecee     call    0x000fdc, 0x0    	CALL	__divuint
000e14   f007
000e16   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000e18   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000e1a   f001
000e1c   0e04     movlw   0x04             	MOVLW	0x04
000e1e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	33; pwm.c	val &= 0x03ff;
000e20   0e03     movlw   0x03             	MOVLW	0x03
000e22   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ;	.line	35; pwm.c	CCPR1L = val >> 2;
000e24   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000e26   3001     rrcf    0x01, 0x0, 0x0   	RRCF	r0x01, W
000e28   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000e2a   3000     rrcf    0x00, 0x0, 0x0   	RRCF	r0x00, W
000e2c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000e2e   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000e30   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
000e32   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
000e34   ee0f     lfsr    0x0, 0xfbe       	LFSR	0x00, 0xfbe
000e36   f0be
000e38   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000e3a   ffef
                                           ;	.line	37; pwm.c	CCP1CON |= (val & 0x0003) << 4;
000e3c   ee0f     lfsr    0x0, 0xfbd       	LFSR	0x00, 0xfbd
000e3e   f0bd
000e40   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000e42   f002
000e44   0e03     movlw   0x03             	MOVLW	0x03
000e46   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
000e48   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000e4a   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
000e4c   0bf0     andlw   0xf0             	ANDLW	0xf0
000e4e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000e50   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000e52   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
000e54   ee0f     lfsr    0x0, 0xfbd       	LFSR	0x00, 0xfbd
000e56   f0bd
000e58   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000e5a   ffef
000e5c   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
000e5e   f003
000e60   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000e62   f002
000e64   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000e66   f001
000e68   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000e6a   f000
000e6c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000e6e   ffd9
000e70   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  638 (0x027e) bytes ( 0.49%)
                                           ;           	  319 (0x013f) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    4 (0x0004) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW32)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_rtcInit
                                           	global	_ht1380write
                                           	global	_ht1380read
                                           	global	_rtcSetDateTime
                                           	global	_rtcGetSeconds
                                           	global	_rtcGetMinutes
                                           	global	_rtcGetHours
                                           	global	_rtcGetDate
                                           	global	_rtcGetMonth
                                           	global	_rtcGetYear
                                           	global	_rtcGetDay
                                           	global	_rtcPutSeconds
                                           	global	_rtcPutMinutes
                                           	global	_rtcPutHours
                                           	global	_rtcPutDate
                                           	global	_rtcPutMonth
                                           	global	_rtcPutDay
                                           	global	_rtcPutYear
                                           	global	_de
                                           	global	_rtcStart
                                           	global	_writeByte
                                           	global	_readByte

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__moduchar
                                           	extern	__divuchar

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1

                                           udata_rtc_0	udata
                                           _de	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_rtc__rtcPutYear	code
                                           _rtcPutYear:
                                           ;	.line	208; rtc.c	void rtcPutYear(unsigned char year) {
001850   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001852   ffe5
001854   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001856   ffd9
001858   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00185a   ffe5
00185c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00185e   ffe5
001860   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001862   ffe5
001864   0e02     movlw   0x02             	MOVLW	0x02
001866   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001868   f000
                                           ;	.line	209; rtc.c	ht1380write(6, (year % 10) | ((year / 10) << 4));
00186a   0e0a     movlw   0x0a             	MOVLW	0x0a
00186c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00186e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001870   ffe5
001872   ecb7     call    0x00176e, 0x0    	CALL	__moduchar
001874   f00b
001876   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001878   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00187a   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00187c   0e0a     movlw   0x0a             	MOVLW	0x0a
00187e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001880   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001882   ffe5
001884   ec42     call    0x001684, 0x0    	CALL	__divuchar
001886   f00b
001888   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00188a   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00188c   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00188e   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001890   0bf0     andlw   0xf0             	ANDLW	0xf0
001892   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001894   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001896   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
001898   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00189a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00189c   0e06     movlw   0x06             	MOVLW	0x06
00189e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018a0   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
0018a2   f00a
0018a4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0018a6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0018a8   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0018aa   f002
0018ac   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0018ae   f001
0018b0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0018b2   f000
0018b4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0018b6   ffd9
0018b8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcPutDay	code
                                           _rtcPutDay:
                                           ;	.line	204; rtc.c	void rtcPutDay(unsigned char day) {
001f4c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001f4e   ffe5
001f50   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001f52   ffd9
001f54   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001f56   ffe5
001f58   0e02     movlw   0x02             	MOVLW	0x02
001f5a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001f5c   f000
                                           ;	.line	205; rtc.c	ht1380write(5, day);
001f5e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001f60   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f62   0e05     movlw   0x05             	MOVLW	0x05
001f64   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f66   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
001f68   f00a
001f6a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001f6c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001f6e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001f70   f000
001f72   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001f74   ffd9
001f76   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcPutMonth	code
                                           _rtcPutMonth:
                                           ;	.line	200; rtc.c	void rtcPutMonth(unsigned char month) {
0018ba   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0018bc   ffe5
0018be   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0018c0   ffd9
0018c2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0018c4   ffe5
0018c6   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0018c8   ffe5
0018ca   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0018cc   ffe5
0018ce   0e02     movlw   0x02             	MOVLW	0x02
0018d0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0018d2   f000
                                           ;	.line	201; rtc.c	ht1380write(4, (month % 10) | ((month / 10) << 4));
0018d4   0e0a     movlw   0x0a             	MOVLW	0x0a
0018d6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018d8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0018da   ffe5
0018dc   ecb7     call    0x00176e, 0x0    	CALL	__moduchar
0018de   f00b
0018e0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0018e2   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0018e4   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0018e6   0e0a     movlw   0x0a             	MOVLW	0x0a
0018e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018ea   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0018ec   ffe5
0018ee   ec42     call    0x001684, 0x0    	CALL	__divuchar
0018f0   f00b
0018f2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0018f4   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0018f6   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0018f8   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0018fa   0bf0     andlw   0xf0             	ANDLW	0xf0
0018fc   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0018fe   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001900   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
001902   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001904   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001906   0e04     movlw   0x04             	MOVLW	0x04
001908   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00190a   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
00190c   f00a
00190e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001910   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001912   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001914   f002
001916   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001918   f001
00191a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00191c   f000
00191e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001920   ffd9
001922   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcPutDate	code
                                           _rtcPutDate:
                                           ;	.line	196; rtc.c	void rtcPutDate(unsigned char date) {
001924   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001926   ffe5
001928   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00192a   ffd9
00192c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00192e   ffe5
001930   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001932   ffe5
001934   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001936   ffe5
001938   0e02     movlw   0x02             	MOVLW	0x02
00193a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00193c   f000
                                           ;	.line	197; rtc.c	ht1380write(3, (date % 10) | ((date / 10) << 4));
00193e   0e0a     movlw   0x0a             	MOVLW	0x0a
001940   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001942   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001944   ffe5
001946   ecb7     call    0x00176e, 0x0    	CALL	__moduchar
001948   f00b
00194a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00194c   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00194e   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001950   0e0a     movlw   0x0a             	MOVLW	0x0a
001952   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001954   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001956   ffe5
001958   ec42     call    0x001684, 0x0    	CALL	__divuchar
00195a   f00b
00195c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00195e   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001960   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001962   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001964   0bf0     andlw   0xf0             	ANDLW	0xf0
001966   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001968   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00196a   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
00196c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00196e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001970   0e03     movlw   0x03             	MOVLW	0x03
001972   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001974   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
001976   f00a
001978   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00197a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00197c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00197e   f002
001980   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001982   f001
001984   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001986   f000
001988   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00198a   ffd9
00198c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcPutHours	code
                                           _rtcPutHours:
                                           ;	.line	192; rtc.c	void rtcPutHours(unsigned char hours) {
00198e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001990   ffe5
001992   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001994   ffd9
001996   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001998   ffe5
00199a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00199c   ffe5
00199e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0019a0   ffe5
0019a2   0e02     movlw   0x02             	MOVLW	0x02
0019a4   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0019a6   f000
                                           ;	.line	193; rtc.c	ht1380write(2, (hours % 10) | ((hours / 10) << 4));
0019a8   0e0a     movlw   0x0a             	MOVLW	0x0a
0019aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019ac   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0019ae   ffe5
0019b0   ecb7     call    0x00176e, 0x0    	CALL	__moduchar
0019b2   f00b
0019b4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0019b6   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0019b8   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0019ba   0e0a     movlw   0x0a             	MOVLW	0x0a
0019bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019be   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0019c0   ffe5
0019c2   ec42     call    0x001684, 0x0    	CALL	__divuchar
0019c4   f00b
0019c6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0019c8   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0019ca   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0019cc   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0019ce   0bf0     andlw   0xf0             	ANDLW	0xf0
0019d0   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0019d2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0019d4   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0019d6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0019d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019da   0e02     movlw   0x02             	MOVLW	0x02
0019dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019de   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
0019e0   f00a
0019e2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0019e4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0019e6   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0019e8   f002
0019ea   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0019ec   f001
0019ee   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0019f0   f000
0019f2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0019f4   ffd9
0019f6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcPutMinutes	code
                                           _rtcPutMinutes:
                                           ;	.line	188; rtc.c	void rtcPutMinutes(unsigned char minutes) {
0019f8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0019fa   ffe5
0019fc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0019fe   ffd9
001a00   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001a02   ffe5
001a04   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001a06   ffe5
001a08   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001a0a   ffe5
001a0c   0e02     movlw   0x02             	MOVLW	0x02
001a0e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001a10   f000
                                           ;	.line	189; rtc.c	ht1380write(1, (minutes % 10) | ((minutes / 10) << 4));
001a12   0e0a     movlw   0x0a             	MOVLW	0x0a
001a14   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a16   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001a18   ffe5
001a1a   ecb7     call    0x00176e, 0x0    	CALL	__moduchar
001a1c   f00b
001a1e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001a20   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001a22   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001a24   0e0a     movlw   0x0a             	MOVLW	0x0a
001a26   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a28   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001a2a   ffe5
001a2c   ec42     call    0x001684, 0x0    	CALL	__divuchar
001a2e   f00b
001a30   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001a32   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001a34   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001a36   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001a38   0bf0     andlw   0xf0             	ANDLW	0xf0
001a3a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001a3c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001a3e   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
001a40   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001a42   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a44   0e01     movlw   0x01             	MOVLW	0x01
001a46   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a48   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
001a4a   f00a
001a4c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001a4e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001a50   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001a52   f002
001a54   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001a56   f001
001a58   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001a5a   f000
001a5c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001a5e   ffd9
001a60   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcPutSeconds	code
                                           _rtcPutSeconds:
                                           ;	.line	184; rtc.c	void rtcPutSeconds(unsigned char seconds) {
001a62   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001a64   ffe5
001a66   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001a68   ffd9
001a6a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001a6c   ffe5
001a6e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001a70   ffe5
001a72   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001a74   ffe5
001a76   0e02     movlw   0x02             	MOVLW	0x02
001a78   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001a7a   f000
                                           ;	.line	185; rtc.c	ht1380write(0, (seconds % 10) | ((seconds / 10) << 4));
001a7c   0e0a     movlw   0x0a             	MOVLW	0x0a
001a7e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a80   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001a82   ffe5
001a84   ecb7     call    0x00176e, 0x0    	CALL	__moduchar
001a86   f00b
001a88   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001a8a   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001a8c   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001a8e   0e0a     movlw   0x0a             	MOVLW	0x0a
001a90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a92   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001a94   ffe5
001a96   ec42     call    0x001684, 0x0    	CALL	__divuchar
001a98   f00b
001a9a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001a9c   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001a9e   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001aa0   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001aa2   0bf0     andlw   0xf0             	ANDLW	0xf0
001aa4   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001aa6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001aa8   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
001aaa   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001aac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001aae   0e00     movlw   0x00             	MOVLW	0x00
001ab0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ab2   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
001ab4   f00a
001ab6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001ab8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001aba   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001abc   f002
001abe   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001ac0   f001
001ac2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001ac4   f000
001ac6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001ac8   ffd9
001aca   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetDay	code
                                           _rtcGetDay:
                                           ;	.line	168; rtc.c	unsigned char rtcGetDay(void) {
001f78   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001f7a   ffe5
001f7c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001f7e   ffd9
001f80   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001f82   ffe5
                                           ;	.line	170; rtc.c	value = ht1380read(5);
001f84   0e05     movlw   0x05             	MOVLW	0x05
001f86   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f88   ec61     call    0x0008c2, 0x0    	CALL	_ht1380read
001f8a   f004
001f8c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001f8e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	171; rtc.c	return (value & 0x0f); // 1..7
001f90   0e0f     movlw   0x0f             	MOVLW	0x0f
001f92   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
001f94   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001f96   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001f98   f000
001f9a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001f9c   ffd9
001f9e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetYear	code
                                           _rtcGetYear:
                                           ;	.line	162; rtc.c	unsigned char rtcGetYear(void) {
001c30   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001c32   ffe5
001c34   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001c36   ffd9
001c38   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001c3a   ffe5
001c3c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001c3e   ffe5
                                           ;	.line	164; rtc.c	value = ht1380read(6);
001c40   0e06     movlw   0x06             	MOVLW	0x06
001c42   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c44   ec61     call    0x0008c2, 0x0    	CALL	_ht1380read
001c46   f004
001c48   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001c4a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	165; rtc.c	return (((value >> 4)&0x0f)*10 + (value & 0x0f));
001c4c   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001c4e   0b0f     andlw   0x0f             	ANDLW	0x0f
001c50   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001c52   0e0f     movlw   0x0f             	MOVLW	0x0f
001c54   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
001c56   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c58   0d0a     mullw   0x0a             	MULLW	0x0a
001c5a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001c5c   f001
001c5e   0e0f     movlw   0x0f             	MOVLW	0x0f
001c60   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
001c62   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c64   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001c66   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c68   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001c6a   f001
001c6c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001c6e   f000
001c70   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001c72   ffd9
001c74   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetMonth	code
                                           _rtcGetMonth:
                                           ;	.line	156; rtc.c	unsigned char rtcGetMonth(void) {
001d8e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001d90   ffe5
001d92   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001d94   ffd9
001d96   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001d98   ffe5
001d9a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001d9c   ffe5
                                           ;	.line	158; rtc.c	value = ht1380read(4);
001d9e   0e04     movlw   0x04             	MOVLW	0x04
001da0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001da2   ec61     call    0x0008c2, 0x0    	CALL	_ht1380read
001da4   f004
001da6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001da8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	159; rtc.c	return (((value >> 4)&0x01)*10 + (value & 0x0f));
001daa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001dac   0b10     andlw   0x10             	ANDLW	0x10
001dae   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
001db0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
001db2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001db4   0d0a     mullw   0x0a             	MULLW	0x0a
001db6   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001db8   f001
001dba   0e0f     movlw   0x0f             	MOVLW	0x0f
001dbc   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
001dbe   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001dc0   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001dc2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001dc4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001dc6   f001
001dc8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001dca   f000
001dcc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001dce   ffd9
001dd0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetDate	code
                                           _rtcGetDate:
                                           ;	.line	150; rtc.c	unsigned char rtcGetDate(void) {
001c76   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001c78   ffe5
001c7a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001c7c   ffd9
001c7e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001c80   ffe5
001c82   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001c84   ffe5
                                           ;	.line	152; rtc.c	value = ht1380read(3);
001c86   0e03     movlw   0x03             	MOVLW	0x03
001c88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c8a   ec61     call    0x0008c2, 0x0    	CALL	_ht1380read
001c8c   f004
001c8e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001c90   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	153; rtc.c	return (((value >> 4)&0x03)*10 + (value & 0x0f));
001c92   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001c94   0b0f     andlw   0x0f             	ANDLW	0x0f
001c96   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001c98   0e03     movlw   0x03             	MOVLW	0x03
001c9a   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
001c9c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c9e   0d0a     mullw   0x0a             	MULLW	0x0a
001ca0   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001ca2   f001
001ca4   0e0f     movlw   0x0f             	MOVLW	0x0f
001ca6   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
001ca8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001caa   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001cac   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001cae   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001cb0   f001
001cb2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001cb4   f000
001cb6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001cb8   ffd9
001cba   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetHours	code
                                           _rtcGetHours:
                                           ;	.line	144; rtc.c	unsigned char rtcGetHours(void) {
001cbc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001cbe   ffe5
001cc0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001cc2   ffd9
001cc4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001cc6   ffe5
001cc8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001cca   ffe5
                                           ;	.line	146; rtc.c	value = ht1380read(2);
001ccc   0e02     movlw   0x02             	MOVLW	0x02
001cce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001cd0   ec61     call    0x0008c2, 0x0    	CALL	_ht1380read
001cd2   f004
001cd4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001cd6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	147; rtc.c	return (((value >> 4)&0x03)*10 + (value & 0x0f));
001cd8   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001cda   0b0f     andlw   0x0f             	ANDLW	0x0f
001cdc   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001cde   0e03     movlw   0x03             	MOVLW	0x03
001ce0   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
001ce2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001ce4   0d0a     mullw   0x0a             	MULLW	0x0a
001ce6   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001ce8   f001
001cea   0e0f     movlw   0x0f             	MOVLW	0x0f
001cec   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
001cee   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001cf0   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001cf2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001cf4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001cf6   f001
001cf8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001cfa   f000
001cfc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001cfe   ffd9
001d00   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetMinutes	code
                                           _rtcGetMinutes:
                                           ;	.line	138; rtc.c	unsigned char rtcGetMinutes(void) {
001d02   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001d04   ffe5
001d06   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001d08   ffd9
001d0a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001d0c   ffe5
001d0e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001d10   ffe5
                                           ;	.line	140; rtc.c	value = ht1380read(1);
001d12   0e01     movlw   0x01             	MOVLW	0x01
001d14   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d16   ec61     call    0x0008c2, 0x0    	CALL	_ht1380read
001d18   f004
001d1a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001d1c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	141; rtc.c	return (((value >> 4)&0x07)*10 + (value & 0x0f));
001d1e   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001d20   0b0f     andlw   0x0f             	ANDLW	0x0f
001d22   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001d24   0e07     movlw   0x07             	MOVLW	0x07
001d26   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
001d28   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d2a   0d0a     mullw   0x0a             	MULLW	0x0a
001d2c   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001d2e   f001
001d30   0e0f     movlw   0x0f             	MOVLW	0x0f
001d32   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
001d34   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001d36   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001d38   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d3a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001d3c   f001
001d3e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001d40   f000
001d42   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001d44   ffd9
001d46   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetSeconds	code
                                           _rtcGetSeconds:
                                           ;	.line	131; rtc.c	unsigned char rtcGetSeconds(void) {
001d48   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001d4a   ffe5
001d4c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001d4e   ffd9
001d50   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001d52   ffe5
001d54   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001d56   ffe5
                                           ;	.line	133; rtc.c	value = ht1380read(0); // read seconds
001d58   0e00     movlw   0x00             	MOVLW	0x00
001d5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d5c   ec61     call    0x0008c2, 0x0    	CALL	_ht1380read
001d5e   f004
001d60   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001d62   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	134; rtc.c	return (((value >> 4)&0x07)*10 + (value & 0x0f));
001d64   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001d66   0b0f     andlw   0x0f             	ANDLW	0x0f
001d68   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001d6a   0e07     movlw   0x07             	MOVLW	0x07
001d6c   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
001d6e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d70   0d0a     mullw   0x0a             	MULLW	0x0a
001d72   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001d74   f001
001d76   0e0f     movlw   0x0f             	MOVLW	0x0f
001d78   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
001d7a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001d7c   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001d7e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d80   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001d82   f001
001d84   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001d86   f000
001d88   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001d8a   ffd9
001d8c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcSetDateTime	code
                                           _rtcSetDateTime:
                                           ;	.line	119; rtc.c	void rtcSetDateTime(void) {
0014f0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0014f2   ffe5
0014f4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0014f6   ffd9
                                           ;	.line	121; rtc.c	ht1380write(7, 0); //disable write protection
0014f8   0e00     movlw   0x00             	MOVLW	0x00
0014fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014fc   0e07     movlw   0x07             	MOVLW	0x07
0014fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001500   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
001502   f00a
001504   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001506   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	122; rtc.c	ht1380write(0, 0x0); //sec
001508   0e00     movlw   0x00             	MOVLW	0x00
00150a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00150c   0e00     movlw   0x00             	MOVLW	0x00
00150e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001510   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
001512   f00a
001514   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001516   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	123; rtc.c	ht1380write(1, 0x21); //min
001518   0e21     movlw   0x21             	MOVLW	0x21
00151a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00151c   0e01     movlw   0x01             	MOVLW	0x01
00151e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001520   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
001522   f00a
001524   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001526   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	124; rtc.c	ht1380write(2, 0x23); //hora
001528   0e23     movlw   0x23             	MOVLW	0x23
00152a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00152c   0e02     movlw   0x02             	MOVLW	0x02
00152e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001530   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
001532   f00a
001534   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001536   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	125; rtc.c	ht1380write(3, 0x28); //dia
001538   0e28     movlw   0x28             	MOVLW	0x28
00153a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00153c   0e03     movlw   0x03             	MOVLW	0x03
00153e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001540   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
001542   f00a
001544   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001546   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	126; rtc.c	ht1380write(4, 0x10); //mes
001548   0e10     movlw   0x10             	MOVLW	0x10
00154a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00154c   0e04     movlw   0x04             	MOVLW	0x04
00154e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001550   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
001552   f00a
001554   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001556   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	127; rtc.c	ht1380write(5, 0x6); //dia semana
001558   0e06     movlw   0x06             	MOVLW	0x06
00155a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00155c   0e05     movlw   0x05             	MOVLW	0x05
00155e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001560   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
001562   f00a
001564   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001566   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	128; rtc.c	ht1380write(6, 0x12); //ano
001568   0e12     movlw   0x12             	MOVLW	0x12
00156a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00156c   0e06     movlw   0x06             	MOVLW	0x06
00156e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001570   ec2e     call    0x00145c, 0x0    	CALL	_ht1380write
001572   f00a
001574   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001576   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001578   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00157a   ffd9
00157c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__ht1380read	code
                                           _ht1380read:
                                           ;	.line	99; rtc.c	unsigned char ht1380read(unsigned char addr) {
0008c2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0008c4   ffe5
0008c6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0008c8   ffd9
0008ca   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0008cc   ffe5
0008ce   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0008d0   ffe5
0008d2   0e02     movlw   0x02             	MOVLW	0x02
0008d4   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0008d6   f000
                                           ;	.line	102; rtc.c	SCL_OFF();
0008d8   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0008da   f082
0008dc   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0008de   f001
0008e0   9601     bcf     0x01, 0x3, 0x0   	BCF	r0x01, 3
0008e2   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0008e4   f082
0008e6   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
0008e8   ffef
                                           ;	.line	103; rtc.c	SDA_OFF();
0008ea   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0008ec   f082
0008ee   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0008f0   f001
0008f2   9801     bcf     0x01, 0x4, 0x0   	BCF	r0x01, 4
0008f4   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0008f6   f082
0008f8   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
0008fa   ffef
                                           ;	.line	106; rtc.c	addr <<= 1;   //corrige endere?o
0008fc   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0008fe   3600     rlcf    0x00, 0x1, 0x0   	RLCF	r0x00, F
                                           ;	.line	107; rtc.c	addr |= 0x81; //liga bit de leitura e hab. clk
000900   0e81     movlw   0x81             	MOVLW	0x81
000902   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
                                           ;	.line	108; rtc.c	writeByte(addr);
000904   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000906   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000908   ec96     call    0x000f2c, 0x0    	CALL	_writeByte
00090a   f007
00090c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	109; rtc.c	SDA_IN();
00090e   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
000910   f094
000912   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000914   f000
000916   8800     bsf     0x00, 0x4, 0x0   	BSF	r0x00, 4
000918   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
00091a   f094
00091c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00091e   ffef
                                           ;	.line	110; rtc.c	DELAY();DELAY();DELAY();DELAY();
000920   0e64     movlw   0x64             	MOVLW	0x64
000922   0100     movlb   0x0              	BANKSEL	_de
000924   6f94     movwf   0x94, 0x1        	MOVWF	_de, B
                                           _00217_DS_:
000926   0100     movlb   0x0              	BANKSEL	_de
000928   0794     decf    0x94, 0x1, 0x1   	DECF	_de, F, B
00092a   0100     movlb   0x0              	BANKSEL	_de
00092c   5194     movf    0x94, 0x0, 0x1   	MOVF	_de, W, B
00092e   e1fb     bnz     0x000926         	BNZ	_00217_DS_
000930   0e64     movlw   0x64             	MOVLW	0x64
000932   0100     movlb   0x0              	BANKSEL	_de
000934   6f94     movwf   0x94, 0x1        	MOVWF	_de, B
                                           _00220_DS_:
000936   0100     movlb   0x0              	BANKSEL	_de
000938   0794     decf    0x94, 0x1, 0x1   	DECF	_de, F, B
00093a   0100     movlb   0x0              	BANKSEL	_de
00093c   5194     movf    0x94, 0x0, 0x1   	MOVF	_de, W, B
00093e   e1fb     bnz     0x000936         	BNZ	_00220_DS_
000940   0e64     movlw   0x64             	MOVLW	0x64
000942   0100     movlb   0x0              	BANKSEL	_de
000944   6f94     movwf   0x94, 0x1        	MOVWF	_de, B
                                           _00223_DS_:
000946   0100     movlb   0x0              	BANKSEL	_de
000948   0794     decf    0x94, 0x1, 0x1   	DECF	_de, F, B
00094a   0100     movlb   0x0              	BANKSEL	_de
00094c   5194     movf    0x94, 0x0, 0x1   	MOVF	_de, W, B
00094e   e1fb     bnz     0x000946         	BNZ	_00223_DS_
000950   0e64     movlw   0x64             	MOVLW	0x64
000952   0100     movlb   0x0              	BANKSEL	_de
000954   6f94     movwf   0x94, 0x1        	MOVWF	_de, B
                                           _00226_DS_:
000956   0100     movlb   0x0              	BANKSEL	_de
000958   0794     decf    0x94, 0x1, 0x1   	DECF	_de, F, B
00095a   0100     movlb   0x0              	BANKSEL	_de
00095c   5194     movf    0x94, 0x0, 0x1   	MOVF	_de, W, B
00095e   e1fb     bnz     0x000956         	BNZ	_00226_DS_
000960   0e64     movlw   0x64             	MOVLW	0x64
000962   0100     movlb   0x0              	BANKSEL	_de
000964   6f94     movwf   0x94, 0x1        	MOVWF	_de, B
                                           ;	.line	111; rtc.c	dados = readByte();
000966   ece2     call    0x0013c4, 0x0    	CALL	_readByte
000968   f009
00096a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	113; rtc.c	SCL_OFF();
00096c   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00096e   f082
000970   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000972   f001
000974   9601     bcf     0x01, 0x3, 0x0   	BCF	r0x01, 3
000976   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000978   f082
00097a   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
00097c   ffef
                                           ;	.line	114; rtc.c	SDA_OFF();
00097e   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000980   f082
000982   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000984   f001
000986   9801     bcf     0x01, 0x4, 0x0   	BCF	r0x01, 4
000988   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00098a   f082
00098c   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
00098e   ffef
                                           ;	.line	115; rtc.c	SDA_OUT();
000990   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
000992   f094
000994   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000996   f001
000998   9801     bcf     0x01, 0x4, 0x0   	BCF	r0x01, 4
00099a   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
00099c   f094
00099e   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
0009a0   ffef
                                           ;	.line	116; rtc.c	return dados;
0009a2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0009a4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0009a6   f001
0009a8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0009aa   f000
0009ac   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0009ae   ffd9
0009b0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__ht1380write	code
                                           _ht1380write:
                                           ;	.line	82; rtc.c	void ht1380write(unsigned char addr, unsigned char dados) {
00145c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00145e   ffe5
001460   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001462   ffd9
001464   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001466   ffe5
001468   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00146a   ffe5
00146c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00146e   ffe5
001470   0e02     movlw   0x02             	MOVLW	0x02
001472   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001474   f000
001476   0e03     movlw   0x03             	MOVLW	0x03
001478   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00147a   f001
                                           ;	.line	84; rtc.c	SCL_OFF();
00147c   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00147e   f082
001480   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001482   f002
001484   9602     bcf     0x02, 0x3, 0x0   	BCF	r0x02, 3
001486   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001488   f082
00148a   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00148c   ffef
                                           ;	.line	85; rtc.c	SDA_OFF();
00148e   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001490   f082
001492   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001494   f002
001496   9802     bcf     0x02, 0x4, 0x0   	BCF	r0x02, 4
001498   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00149a   f082
00149c   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00149e   ffef
                                           ;	.line	90; rtc.c	addr <<= 1;   //corrige endere?o
0014a0   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0014a2   3600     rlcf    0x00, 0x1, 0x0   	RLCF	r0x00, F
                                           ;	.line	91; rtc.c	addr |= 0x80; //habilita clock
0014a4   8e00     bsf     0x00, 0x7, 0x0   	BSF	r0x00, 7
                                           ;	.line	92; rtc.c	writeByte(addr);
0014a6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0014a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014aa   ec96     call    0x000f2c, 0x0    	CALL	_writeByte
0014ac   f007
0014ae   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	93; rtc.c	writeByte(dados);
0014b0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0014b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014b4   ec96     call    0x000f2c, 0x0    	CALL	_writeByte
0014b6   f007
0014b8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	95; rtc.c	SCL_OFF();
0014ba   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0014bc   f082
0014be   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0014c0   f000
0014c2   9600     bcf     0x00, 0x3, 0x0   	BCF	r0x00, 3
0014c4   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0014c6   f082
0014c8   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0014ca   ffef
                                           ;	.line	96; rtc.c	SDA_OFF();
0014cc   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0014ce   f082
0014d0   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0014d2   f000
0014d4   9800     bcf     0x00, 0x4, 0x0   	BCF	r0x00, 4
0014d6   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0014d8   f082
0014da   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0014dc   ffef
0014de   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0014e0   f002
0014e2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0014e4   f001
0014e6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0014e8   f000
0014ea   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0014ec   ffd9
0014ee   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__readByte	code
                                           _readByte:
                                           ;	.line	62; rtc.c	unsigned char readByte() {
0013c4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0013c6   ffe5
0013c8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0013ca   ffd9
0013cc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0013ce   ffe5
0013d0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0013d2   ffe5
0013d4   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0013d6   ffe5
                                           ;	.line	65; rtc.c	dados = 0;
0013d8   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ;	.line	66; rtc.c	for (i = 0; i < 8; i++) {
0013da   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00171_DS_:
                                           ;	.line	67; rtc.c	SCL_ON();
0013dc   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0013de   f082
0013e0   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0013e2   f002
0013e4   8602     bsf     0x02, 0x3, 0x0   	BSF	r0x02, 3
0013e6   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0013e8   f082
0013ea   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0013ec   ffef
                                           ;	.line	68; rtc.c	DELAY();
0013ee   0e64     movlw   0x64             	MOVLW	0x64
0013f0   0100     movlb   0x0              	BANKSEL	_de
0013f2   6f94     movwf   0x94, 0x1        	MOVWF	_de, B
                                           _00167_DS_:
0013f4   0100     movlb   0x0              	BANKSEL	_de
0013f6   0794     decf    0x94, 0x1, 0x1   	DECF	_de, F, B
0013f8   0100     movlb   0x0              	BANKSEL	_de
0013fa   5194     movf    0x94, 0x0, 0x1   	MOVF	_de, W, B
0013fc   e1fb     bnz     0x0013f4         	BNZ	_00167_DS_
0013fe   0e64     movlw   0x64             	MOVLW	0x64
001400   0100     movlb   0x0              	BANKSEL	_de
001402   6f94     movwf   0x94, 0x1        	MOVWF	_de, B
                                           ;	.line	70; rtc.c	dados >>= 1;
001404   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001406   3200     rrcf    0x00, 0x1, 0x0   	RRCF	r0x00, F
                                           ;	.line	72; rtc.c	if (SDA()) {
001408   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00140a   f082
00140c   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
00140e   f002
001410   a802     btfss   0x02, 0x4, 0x0   	BTFSS	r0x02, 4
001412   d001     bra     0x001416         	BRA	_00162_DS_
                                           ;	.line	73; rtc.c	dados |= 0x80;
001414   8e00     bsf     0x00, 0x7, 0x0   	BSF	r0x00, 7
                                           _00162_DS_:
                                           ;	.line	76; rtc.c	SCL_OFF();
001416   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001418   f082
00141a   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
00141c   f002
00141e   9602     bcf     0x02, 0x3, 0x0   	BCF	r0x02, 3
001420   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
001422   f082
001424   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001426   ffef
                                           ;	.line	77; rtc.c	DELAY();
001428   0e64     movlw   0x64             	MOVLW	0x64
00142a   0100     movlb   0x0              	BANKSEL	_de
00142c   6f94     movwf   0x94, 0x1        	MOVWF	_de, B
                                           _00170_DS_:
00142e   0100     movlb   0x0              	BANKSEL	_de
001430   0794     decf    0x94, 0x1, 0x1   	DECF	_de, F, B
001432   0100     movlb   0x0              	BANKSEL	_de
001434   5194     movf    0x94, 0x0, 0x1   	MOVF	_de, W, B
001436   e1fb     bnz     0x00142e         	BNZ	_00170_DS_
001438   0e64     movlw   0x64             	MOVLW	0x64
00143a   0100     movlb   0x0              	BANKSEL	_de
00143c   6f94     movwf   0x94, 0x1        	MOVWF	_de, B
                                           ;	.line	66; rtc.c	for (i = 0; i < 8; i++) {
00143e   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001440   0e08     movlw   0x08             	MOVLW	0x08
001442   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001444   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
001446   d7ca     bra     0x0013dc         	BRA	_00171_DS_
                                           ;	.line	79; rtc.c	return dados;
001448   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00144a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00144c   f002
00144e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001450   f001
001452   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001454   f000
001456   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001458   ffd9
00145a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__writeByte	code
                                           _writeByte:
                                           ;	.line	41; rtc.c	void writeByte(unsigned char dados) {
000f2c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000f2e   ffe5
000f30   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000f32   ffd9
000f34   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000f36   ffe5
000f38   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000f3a   ffe5
000f3c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000f3e   ffe5
000f40   0e02     movlw   0x02             	MOVLW	0x02
000f42   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000f44   f000
                                           ;	.line	43; rtc.c	for (i = 0; i < 8; i++) {
000f46   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00127_DS_:
                                           ;	.line	45; rtc.c	if (dados & 0x01) {
000f48   a000     btfss   0x00, 0x0, 0x0   	BTFSS	r0x00, 0
000f4a   d00a     bra     0x000f60         	BRA	_00116_DS_
                                           ;	.line	46; rtc.c	SDA_ON();
000f4c   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000f4e   f082
000f50   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000f52   f002
000f54   8802     bsf     0x02, 0x4, 0x0   	BSF	r0x02, 4
000f56   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000f58   f082
000f5a   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000f5c   ffef
000f5e   d009     bra     0x000f72         	BRA	_00117_DS_
                                           _00116_DS_:
                                           ;	.line	48; rtc.c	SDA_OFF();
000f60   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000f62   f082
000f64   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000f66   f002
000f68   9802     bcf     0x02, 0x4, 0x0   	BCF	r0x02, 4
000f6a   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000f6c   f082
000f6e   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000f70   ffef
                                           _00117_DS_:
                                           ;	.line	51; rtc.c	dados >>= 1;
000f72   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000f74   3200     rrcf    0x00, 0x1, 0x0   	RRCF	r0x00, F
                                           ;	.line	53; rtc.c	SCL_ON();
000f76   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000f78   f082
000f7a   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000f7c   f002
000f7e   8602     bsf     0x02, 0x3, 0x0   	BSF	r0x02, 3
000f80   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000f82   f082
000f84   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000f86   ffef
                                           ;	.line	54; rtc.c	DELAY();
000f88   0e64     movlw   0x64             	MOVLW	0x64
000f8a   0100     movlb   0x0              	BANKSEL	_de
000f8c   6f94     movwf   0x94, 0x1        	MOVWF	_de, B
                                           _00123_DS_:
000f8e   0100     movlb   0x0              	BANKSEL	_de
000f90   0794     decf    0x94, 0x1, 0x1   	DECF	_de, F, B
000f92   0100     movlb   0x0              	BANKSEL	_de
000f94   5194     movf    0x94, 0x0, 0x1   	MOVF	_de, W, B
000f96   e1fb     bnz     0x000f8e         	BNZ	_00123_DS_
                                           ;	.line	56; rtc.c	SCL_OFF();
000f98   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000f9a   f082
000f9c   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000f9e   f002
000fa0   9602     bcf     0x02, 0x3, 0x0   	BCF	r0x02, 3
000fa2   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
000fa4   f082
000fa6   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000fa8   ffef
                                           ;	.line	57; rtc.c	DELAY();
000faa   0e64     movlw   0x64             	MOVLW	0x64
000fac   0100     movlb   0x0              	BANKSEL	_de
000fae   6f94     movwf   0x94, 0x1        	MOVWF	_de, B
                                           _00126_DS_:
000fb0   0100     movlb   0x0              	BANKSEL	_de
000fb2   0794     decf    0x94, 0x1, 0x1   	DECF	_de, F, B
000fb4   0100     movlb   0x0              	BANKSEL	_de
000fb6   5194     movf    0x94, 0x0, 0x1   	MOVF	_de, W, B
000fb8   e1fb     bnz     0x000fb0         	BNZ	_00126_DS_
000fba   0e64     movlw   0x64             	MOVLW	0x64
000fbc   0100     movlb   0x0              	BANKSEL	_de
000fbe   6f94     movwf   0x94, 0x1        	MOVWF	_de, B
                                           ;	.line	43; rtc.c	for (i = 0; i < 8; i++) {
000fc0   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000fc2   0e08     movlw   0x08             	MOVLW	0x08
000fc4   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
000fc6   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
000fc8   d7bf     bra     0x000f48         	BRA	_00127_DS_
000fca   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000fcc   f002
000fce   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000fd0   f001
000fd2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000fd4   f000
000fd6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000fd8   ffd9
000fda   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcStart	code
                                           _rtcStart:
                                           ;	.line	33; rtc.c	void rtcStart() {
001be4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001be6   ffe5
001be8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001bea   ffd9
001bec   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001bee   ffe5
                                           ;	.line	36; rtc.c	SDA_OUT();
001bf0   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001bf2   f094
001bf4   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001bf6   f000
001bf8   9800     bcf     0x00, 0x4, 0x0   	BCF	r0x00, 4
001bfa   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001bfc   f094
001bfe   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001c00   ffef
                                           ;	.line	37; rtc.c	SCL_OUT();
001c02   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001c04   f094
001c06   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001c08   f000
001c0a   9600     bcf     0x00, 0x3, 0x0   	BCF	r0x00, 3
001c0c   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001c0e   f094
001c10   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001c12   ffef
                                           ;	.line	38; rtc.c	BitClr(INTCON2, 7); //liga pull up
001c14   ee0f     lfsr    0x0, 0xff1       	LFSR	0x00, 0xff1
001c16   f0f1
001c18   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001c1a   f000
001c1c   9e00     bcf     0x00, 0x7, 0x0   	BCF	r0x00, 7
001c1e   ee0f     lfsr    0x0, 0xff1       	LFSR	0x00, 0xff1
001c20   f0f1
001c22   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001c24   ffef
001c26   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001c28   f000
001c2a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001c2c   ffd9
001c2e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcInit	code
                                           _rtcInit:
                                           ;	.line	26; rtc.c	void rtcInit() {
001e12   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001e14   ffe5
001e16   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001e18   ffd9
001e1a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001e1c   ffe5
                                           ;	.line	29; rtc.c	SDA_OUT();
001e1e   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001e20   f094
001e22   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001e24   f000
001e26   9800     bcf     0x00, 0x4, 0x0   	BCF	r0x00, 4
001e28   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001e2a   f094
001e2c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001e2e   ffef
                                           ;	.line	30; rtc.c	SCL_OUT();
001e30   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001e32   f094
001e34   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001e36   f000
001e38   9600     bcf     0x00, 0x3, 0x0   	BCF	r0x00, 3
001e3a   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001e3c   f094
001e3e   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001e40   ffef
001e42   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001e44   f000
001e46   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001e48   ffd9
001e4a   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	 2130 (0x0852) bytes ( 1.63%)
                                           ;           	 1065 (0x0429) words
                                           ; udata size:	    1 (0x0001) bytes ( 0.08%)
                                           ; access size:	    3 (0x0003) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW32)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_EnviaSerial
                                           	global	_RecebeSerial
                                           	global	_InicializaSerial

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_serial__InicializaSerial	code
                                           _InicializaSerial:
                                           ;	.line	46; serial.c	void InicializaSerial(void) {
001b32   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001b34   ffe5
001b36   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001b38   ffd9
001b3a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001b3c   ffe5
                                           ;	.line	47; serial.c	TXSTA = 0b00101100; //configura a transmissão de dados da serial
001b3e   ee0f     lfsr    0x0, 0xfac       	LFSR	0x00, 0xfac
001b40   f0ac
001b42   0e2c     movlw   0x2c             	MOVLW	0x2c
001b44   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	48; serial.c	RCSTA = 0b10010000; //configura a recepção de dados da serial
001b46   ee0f     lfsr    0x0, 0xfab       	LFSR	0x00, 0xfab
001b48   f0ab
001b4a   0e90     movlw   0x90             	MOVLW	0x90
001b4c   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	49; serial.c	BAUDCON = 0b00001000; //configura sistema de velocidade da serial
001b4e   ee0f     lfsr    0x0, 0xfb8       	LFSR	0x00, 0xfb8
001b50   f0b8
001b52   0e08     movlw   0x08             	MOVLW	0x08
001b54   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	50; serial.c	SPBRGH = 0b00000000; //configura para 56k
001b56   ee0f     lfsr    0x0, 0xfb0       	LFSR	0x00, 0xfb0
001b58   f0b0
001b5a   0e00     movlw   0x00             	MOVLW	0x00
001b5c   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	51; serial.c	SPBRG = 0b00100010; //configura para 56k
001b5e   ee0f     lfsr    0x0, 0xfaf       	LFSR	0x00, 0xfaf
001b60   f0af
001b62   0e22     movlw   0x22             	MOVLW	0x22
001b64   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	52; serial.c	BitSet(TRISC, 6); //pino de recepção de dados
001b66   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001b68   f094
001b6a   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001b6c   f000
001b6e   8c00     bsf     0x00, 0x6, 0x0   	BSF	r0x00, 6
001b70   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001b72   f094
001b74   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001b76   ffef
                                           ;	.line	53; serial.c	BitSet(TRISC, 7); //pino de envio de dados
001b78   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001b7a   f094
001b7c   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001b7e   f000
001b80   8e00     bsf     0x00, 0x7, 0x0   	BSF	r0x00, 7
001b82   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
001b84   f094
001b86   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001b88   ffef
001b8a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001b8c   f000
001b8e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001b90   ffd9
001b92   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_serial__RecebeSerial	code
                                           _RecebeSerial:
                                           ;	.line	28; serial.c	unsigned char RecebeSerial(void) {
001acc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001ace   ffe5
001ad0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001ad2   ffd9
001ad4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001ad6   ffe5
001ad8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001ada   ffe5
                                           ;	.line	29; serial.c	char resp = 0;
001adc   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ;	.line	31; serial.c	if (BitTst(RCSTA, 1)) //Verifica se há erro de overrun e reseta a serial
001ade   ee0f     lfsr    0x0, 0xfab       	LFSR	0x00, 0xfab
001ae0   f0ab
001ae2   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001ae4   f001
001ae6   a201     btfss   0x01, 0x1, 0x0   	BTFSS	r0x01, 1
001ae8   d012     bra     0x001b0e         	BRA	_00122_DS_
                                           ;	.line	33; serial.c	BitClr(RCSTA, 4);
001aea   ee0f     lfsr    0x0, 0xfab       	LFSR	0x00, 0xfab
001aec   f0ab
001aee   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001af0   f001
001af2   9801     bcf     0x01, 0x4, 0x0   	BCF	r0x01, 4
001af4   ee0f     lfsr    0x0, 0xfab       	LFSR	0x00, 0xfab
001af6   f0ab
001af8   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
001afa   ffef
                                           ;	.line	34; serial.c	BitSet(RCSTA, 4);
001afc   ee0f     lfsr    0x0, 0xfab       	LFSR	0x00, 0xfab
001afe   f0ab
001b00   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001b02   f001
001b04   8801     bsf     0x01, 0x4, 0x0   	BSF	r0x01, 4
001b06   ee0f     lfsr    0x0, 0xfab       	LFSR	0x00, 0xfab
001b08   f0ab
001b0a   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
001b0c   ffef
                                           _00122_DS_:
                                           ;	.line	37; serial.c	if (BitTst(PIR1, 5)) //Verifica se existe algum valor disponivel
001b0e   ee0f     lfsr    0x0, 0xf9e       	LFSR	0x00, 0xf9e
001b10   f09e
001b12   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001b14   f001
001b16   aa01     btfss   0x01, 0x5, 0x0   	BTFSS	r0x01, 5
001b18   d004     bra     0x001b22         	BRA	_00124_DS_
                                           ;	.line	39; serial.c	resp = RCREG; //retorna o valor
001b1a   ee0f     lfsr    0x0, 0xfae       	LFSR	0x00, 0xfae
001b1c   f0ae
001b1e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001b20   f000
                                           _00124_DS_:
                                           ;	.line	41; serial.c	return resp; //retorna zero
001b22   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b24   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001b26   f001
001b28   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001b2a   f000
001b2c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001b2e   ffd9
001b30   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_serial__EnviaSerial	code
                                           _EnviaSerial:
                                           ;	.line	23; serial.c	void EnviaSerial(unsigned char c) {
001e4c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001e4e   ffe5
001e50   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001e52   ffd9
001e54   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001e56   ffe5
001e58   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001e5a   ffe5
001e5c   0e02     movlw   0x02             	MOVLW	0x02
001e5e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001e60   f000
                                           _00105_DS_:
                                           ;	.line	24; serial.c	while (!BitTst(PIR1, 4)); //aguarda o registro ficar disponível
001e62   ee0f     lfsr    0x0, 0xf9e       	LFSR	0x00, 0xf9e
001e64   f09e
001e66   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001e68   f001
001e6a   a801     btfss   0x01, 0x4, 0x0   	BTFSS	r0x01, 4
001e6c   d7fa     bra     0x001e62         	BRA	_00105_DS_
                                           ;	.line	25; serial.c	TXREG = c; //coloca o valor para ser enviado
001e6e   ee0f     lfsr    0x0, 0xfad       	LFSR	0x00, 0xfad
001e70   f0ad
001e72   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001e74   ffef
001e76   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001e78   f001
001e7a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001e7c   f000
001e7e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001e80   ffd9
001e82   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  256 (0x0100) bytes ( 0.20%)
                                           ;           	  128 (0x0080) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    2 (0x0002) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW32)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_LerTeclas
                                           	global	_DebounceTeclas
                                           	global	_InicializaTeclado

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4


                                           	idata
                                           _valor	db	0x00
                                           _DebounceTeclas_valorNovo_1_7	db	0x00
                                           _DebounceTeclas_valorAntigo_1_7	db	0x00


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1

                                           udata_teclado_0	udata
                                           _DebounceTeclas_tempo_1_7	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_teclado__InicializaTeclado	code
                                           _InicializaTeclado:
                                           ;	.line	65; teclado.c	void InicializaTeclado(void) {
001e84   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001e86   ffe5
001e88   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001e8a   ffd9
001e8c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001e8e   ffe5
                                           ;	.line	66; teclado.c	TRISB = 0xF0; //quatro entradas e quatro saidas
001e90   ee0f     lfsr    0x0, 0xf93       	LFSR	0x00, 0xf93
001e92   f093
001e94   0ef0     movlw   0xf0             	MOVLW	0xf0
001e96   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	67; teclado.c	BitClr(INTCON2, 7); //liga pull up
001e98   ee0f     lfsr    0x0, 0xff1       	LFSR	0x00, 0xff1
001e9a   f0f1
001e9c   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001e9e   f000
001ea0   9e00     bcf     0x00, 0x7, 0x0   	BCF	r0x00, 7
001ea2   ee0f     lfsr    0x0, 0xff1       	LFSR	0x00, 0xff1
001ea4   f0f1
001ea6   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001ea8   ffef
                                           ;	.line	68; teclado.c	ADCON1 = 0b00001110; //apenas AN0 é analogico, a referencia é baseada na fonte
001eaa   ee0f     lfsr    0x0, 0xfc1       	LFSR	0x00, 0xfc1
001eac   f0c1
001eae   0e0e     movlw   0x0e             	MOVLW	0x0e
001eb0   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
001eb2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001eb4   f000
001eb6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001eb8   ffd9
001eba   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_teclado__DebounceTeclas	code
                                           _DebounceTeclas:
                                           ;	.line	29; teclado.c	void DebounceTeclas(void) {
000626   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000628   ffe5
00062a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00062c   ffd9
00062e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000630   ffe5
000632   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000634   ffe5
000636   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000638   ffe5
00063a   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00063c   ffe5
00063e   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
000640   ffe5
000642   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
000644   ffe5
000646   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
000648   ffe5
00064a   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
00064c   ffe5
00064e   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
000650   ffe5
000652   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
000654   ffe5
                                           ;	.line	35; teclado.c	for (i = 0; i < 4; i++) {
000656   6a00     clrf    0x00, 0x0        	CLRF	r0x00
000658   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00065a   6a02     clrf    0x02, 0x0        	CLRF	r0x02
                                           _00126_DS_:
                                           ;	.line	38; teclado.c	PORTB |= 0x0F;
00065c   ee0f     lfsr    0x0, 0xf81       	LFSR	0x00, 0xf81
00065e   f081
000660   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
000662   f003
000664   0e0f     movlw   0x0f             	MOVLW	0x0f
000666   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
000668   ee0f     lfsr    0x0, 0xf81       	LFSR	0x00, 0xf81
00066a   f081
00066c   c003     movff   0x003, 0xfef     	MOVFF	r0x03, INDF0
00066e   ffef
                                           ;	.line	39; teclado.c	BitClr(PORTB, (i)); //liga a coluna correspondente
000670   ee0f     lfsr    0x0, 0xf81       	LFSR	0x00, 0xf81
000672   f081
000674   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
000676   f003
000678   0e01     movlw   0x01             	MOVLW	0x01
00067a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00067c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00067e   e005     bz      0x00068a         	BZ	_00161_DS_
000680   6ce8     negf    0xe8, 0x0        	NEGF	WREG
000682   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00162_DS_:
000684   3604     rlcf    0x04, 0x1, 0x0   	RLCF	r0x04, F
000686   0f01     addlw   0x01             	ADDLW	0x01
000688   e3fd     bnc     0x000684         	BNC	_00162_DS_
                                           _00161_DS_:
00068a   1e04     comf    0x04, 0x1, 0x0   	COMF	r0x04, F
00068c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00068e   1603     andwf   0x03, 0x1, 0x0   	ANDWF	r0x03, F
000690   ee0f     lfsr    0x0, 0xf81       	LFSR	0x00, 0xf81
000692   f081
000694   c003     movff   0x003, 0xfef     	MOVFF	r0x03, INDF0
000696   ffef
                                           ;	.line	41; teclado.c	for (j = 0; j < 100; j++);
000698   0e64     movlw   0x64             	MOVLW	0x64
00069a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           _00123_DS_:
00069c   2e03     decfsz  0x03, 0x1, 0x0   	DECFSZ	r0x03, F
00069e   d7fe     bra     0x00069c         	BRA	_00123_DS_
                                           ;	.line	44; teclado.c	for (j = 0; j < 2; j++) {
0006a0   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           _00124_DS_:
                                           ;	.line	45; teclado.c	if (!BitTst(PORTB, j + 4)) {
0006a2   ee0f     lfsr    0x0, 0xf81       	LFSR	0x00, 0xf81
0006a4   f081
0006a6   cfef     movff   0xfef, 0x004     	MOVFF	INDF0, r0x04
0006a8   f004
0006aa   c003     movff   0x003, 0x005     	MOVFF	r0x03, r0x05
0006ac   f005
0006ae   6a06     clrf    0x06, 0x0        	CLRF	r0x06
0006b0   0e04     movlw   0x04             	MOVLW	0x04
0006b2   2605     addwf   0x05, 0x1, 0x0   	ADDWF	r0x05, F
0006b4   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0006b6   2a06     incf    0x06, 0x1, 0x0   	INCF	r0x06, F
0006b8   0e01     movlw   0x01             	MOVLW	0x01
0006ba   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0006bc   0e00     movlw   0x00             	MOVLW	0x00
0006be   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0006c0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0006c2   e00f     bz      0x0006e2         	BZ	_00164_DS_
0006c4   e607     bn      0x0006d4         	BN	_00167_DS_
0006c6   6ce8     negf    0xe8, 0x0        	NEGF	WREG
0006c8   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00165_DS_:
0006ca   3607     rlcf    0x07, 0x1, 0x0   	RLCF	r0x07, F
0006cc   3608     rlcf    0x08, 0x1, 0x0   	RLCF	r0x08, F
0006ce   0f01     addlw   0x01             	ADDLW	0x01
0006d0   e3fc     bnc     0x0006ca         	BNC	_00165_DS_
0006d2   d007     bra     0x0006e2         	BRA	_00164_DS_
                                           _00167_DS_:
0006d4   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00166_DS_:
0006d6   be08     btfsc   0x08, 0x7, 0x0   	BTFSC	r0x08, 7
0006d8   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0006da   3208     rrcf    0x08, 0x1, 0x0   	RRCF	r0x08, F
0006dc   3207     rrcf    0x07, 0x1, 0x0   	RRCF	r0x07, F
0006de   0f01     addlw   0x01             	ADDLW	0x01
0006e0   e3fa     bnc     0x0006d6         	BNC	_00166_DS_
                                           _00164_DS_:
0006e2   6a09     clrf    0x09, 0x0        	CLRF	r0x09
0006e4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0006e6   1607     andwf   0x07, 0x1, 0x0   	ANDWF	r0x07, F
0006e8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0006ea   1608     andwf   0x08, 0x1, 0x0   	ANDWF	r0x08, F
0006ec   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0006ee   1008     iorwf   0x08, 0x0, 0x0   	IORWF	r0x08, W
0006f0   e110     bnz     0x000712         	BNZ	_00112_DS_
                                           ;	.line	46; teclado.c	BitSet(valorNovo, (i * 2) + j);
0006f2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0006f4   2402     addwf   0x02, 0x0, 0x0   	ADDWF	r0x02, W
0006f6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0006f8   0e01     movlw   0x01             	MOVLW	0x01
0006fa   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0006fc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0006fe   e005     bz      0x00070a         	BZ	_00168_DS_
000700   6ce8     negf    0xe8, 0x0        	NEGF	WREG
000702   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00169_DS_:
000704   3605     rlcf    0x05, 0x1, 0x0   	RLCF	r0x05, F
000706   0f01     addlw   0x01             	ADDLW	0x01
000708   e3fd     bnc     0x000704         	BNC	_00169_DS_
                                           _00168_DS_:
00070a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00070c   0100     movlb   0x0              	BANKSEL	_DebounceTeclas_valorNovo_1_7
00070e   1381     iorwf   0x81, 0x1, 0x1   	IORWF	_DebounceTeclas_valorNovo_1_7, F, B
000710   d011     bra     0x000734         	BRA	_00125_DS_
                                           _00112_DS_:
                                           ;	.line	48; teclado.c	BitClr(valorNovo, (i * 2) + j);
000712   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000714   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
000716   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000718   0e01     movlw   0x01             	MOVLW	0x01
00071a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00071c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00071e   e005     bz      0x00072a         	BZ	_00171_DS_
000720   6ce8     negf    0xe8, 0x0        	NEGF	WREG
000722   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00172_DS_:
000724   3605     rlcf    0x05, 0x1, 0x0   	RLCF	r0x05, F
000726   0f01     addlw   0x01             	ADDLW	0x01
000728   e3fd     bnc     0x000724         	BNC	_00172_DS_
                                           _00171_DS_:
00072a   1c05     comf    0x05, 0x0, 0x0   	COMF	r0x05, W
00072c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00072e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000730   0100     movlb   0x0              	BANKSEL	_DebounceTeclas_valorNovo_1_7
000732   1781     andwf   0x81, 0x1, 0x1   	ANDWF	_DebounceTeclas_valorNovo_1_7, F, B
                                           _00125_DS_:
                                           ;	.line	44; teclado.c	for (j = 0; j < 2; j++) {
000734   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
000736   0e02     movlw   0x02             	MOVLW	0x02
000738   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
00073a   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00073c   d7b2     bra     0x0006a2         	BRA	_00124_DS_
                                           ;	.line	35; teclado.c	for (i = 0; i < 4; i++) {
00073e   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000740   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000742   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
000744   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
000746   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
000748   0e04     movlw   0x04             	MOVLW	0x04
00074a   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
00074c   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00074e   d786     bra     0x00065c         	BRA	_00126_DS_
000750   0100     movlb   0x0              	BANKSEL	_DebounceTeclas_valorAntigo_1_7
                                           ;	.line	54; teclado.c	if (valorAntigo == valorNovo) {
000752   5182     movf    0x82, 0x0, 0x1   	MOVF	_DebounceTeclas_valorAntigo_1_7, W, B
000754   0100     movlb   0x0              	BANKSEL	_DebounceTeclas_valorNovo_1_7
000756   1981     xorwf   0x81, 0x0, 0x1   	XORWF	_DebounceTeclas_valorNovo_1_7, W, B
000758   e103     bnz     0x000760         	BNZ	_00117_DS_
                                           _00177_DS_:
00075a   0100     movlb   0x0              	BANKSEL	_DebounceTeclas_tempo_1_7
                                           ;	.line	55; teclado.c	tempo--;
00075c   0795     decf    0x95, 0x1, 0x1   	DECF	_DebounceTeclas_tempo_1_7, F, B
00075e   d005     bra     0x00076a         	BRA	_00118_DS_
                                           _00117_DS_:
                                           ;	.line	57; teclado.c	tempo = 10;
000760   0e0a     movlw   0x0a             	MOVLW	0x0a
000762   0100     movlb   0x0              	BANKSEL	_DebounceTeclas_tempo_1_7
000764   6f95     movwf   0x95, 0x1        	MOVWF	_DebounceTeclas_tempo_1_7, B
                                           ;	.line	58; teclado.c	valorAntigo = valorNovo;
000766   c081     movff   0x081, 0x082     	MOVFF	_DebounceTeclas_valorNovo_1_7, _DebounceTeclas_valorAntigo_1_7
000768   f082
                                           _00118_DS_:
00076a   0100     movlb   0x0              	BANKSEL	_DebounceTeclas_tempo_1_7
                                           ;	.line	60; teclado.c	if (tempo == 0) {
00076c   5195     movf    0x95, 0x0, 0x1   	MOVF	_DebounceTeclas_tempo_1_7, W, B
00076e   e102     bnz     0x000774         	BNZ	_00128_DS_
                                           ;	.line	61; teclado.c	valor = valorAntigo;
000770   c082     movff   0x082, 0x080     	MOVFF	_DebounceTeclas_valorAntigo_1_7, _valor
000772   f080
                                           _00128_DS_:
000774   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
000776   f009
000778   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
00077a   f008
00077c   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
00077e   f007
000780   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
000782   f006
000784   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
000786   f005
000788   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
00078a   f004
00078c   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00078e   f003
000790   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000792   f002
000794   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000796   f001
000798   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00079a   f000
00079c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00079e   ffd9
0007a0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_teclado__LerTeclas	code
                                           _LerTeclas:
                                           ;	.line	25; teclado.c	unsigned char LerTeclas(void) {
001fe6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001fe8   ffe5
001fea   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001fec   ffd9
001fee   0100     movlb   0x0              	BANKSEL	_valor
                                           ;	.line	26; teclado.c	return valor;
001ff0   5180     movf    0x80, 0x0, 0x1   	MOVF	_valor, W, B
001ff2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001ff4   ffd9
001ff6   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  454 (0x01c6) bytes ( 0.35%)
                                           ;           	  227 (0x00e3) words
                                           ; udata size:	    1 (0x0001) bytes ( 0.08%)
                                           ; access size:	   10 (0x000a) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW32)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_FimTimer
                                           	global	_AguardaTimer
                                           	global	_ResetaTimer
                                           	global	_InicializaTimer

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__mulint

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_timer__InicializaTimer	code
                                           _InicializaTimer:
                                           ;	.line	49; timer.c	void InicializaTimer(void)
001eee   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001ef0   ffe5
001ef2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001ef4   ffd9
001ef6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001ef8   ffe5
                                           ;	.line	51; timer.c	T0CON = 0b00001000; //configura timer 0 sem prescaler
001efa   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
001efc   f0d5
001efe   0e08     movlw   0x08             	MOVLW	0x08
001f00   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	52; timer.c	BitSet(T0CON,7); //liga o timer 0
001f02   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
001f04   f0d5
001f06   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001f08   f000
001f0a   8e00     bsf     0x00, 0x7, 0x0   	BSF	r0x00, 7
001f0c   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
001f0e   f0d5
001f10   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001f12   ffef
001f14   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001f16   f000
001f18   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001f1a   ffd9
001f1c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_timer__ResetaTimer	code
                                           _ResetaTimer:
                                           ;	.line	35; timer.c	void ResetaTimer(unsigned int tempo)
000b7c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000b7e   ffe5
000b80   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000b82   ffd9
000b84   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000b86   ffe5
000b88   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000b8a   ffe5
000b8c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000b8e   ffe5
000b90   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
000b92   ffe5
000b94   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
000b96   ffe5
000b98   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
000b9a   ffe5
000b9c   0e02     movlw   0x02             	MOVLW	0x02
000b9e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000ba0   f000
000ba2   0e03     movlw   0x03             	MOVLW	0x03
000ba4   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
000ba6   f001
                                           ;	.line	38; timer.c	unsigned ciclos = tempo * 2;
000ba8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000baa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bac   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000bae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bb0   0e00     movlw   0x00             	MOVLW	0x00
000bb2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bb4   0e02     movlw   0x02             	MOVLW	0x02
000bb6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bb8   ec92     call    0x001324, 0x0    	CALL	__mulint
000bba   f009
000bbc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000bbe   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
000bc0   f001
000bc2   0e04     movlw   0x04             	MOVLW	0x04
000bc4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	40; timer.c	ciclos = 65535 - ciclos;
000bc6   c000     movff   0x000, 0x002     	MOVFF	r0x00, r0x02
000bc8   f002
000bca   c001     movff   0x001, 0x003     	MOVFF	r0x01, r0x03
000bcc   f003
000bce   6a04     clrf    0x04, 0x0        	CLRF	r0x04
000bd0   6a05     clrf    0x05, 0x0        	CLRF	r0x05
000bd2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000bd4   08ff     sublw   0xff             	SUBLW	0xff
000bd6   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000bd8   0eff     movlw   0xff             	MOVLW	0xff
000bda   5603     subfwb  0x03, 0x1, 0x0   	SUBFWB	r0x03, F
000bdc   0e00     movlw   0x00             	MOVLW	0x00
000bde   5604     subfwb  0x04, 0x1, 0x0   	SUBFWB	r0x04, F
000be0   0e00     movlw   0x00             	MOVLW	0x00
000be2   5605     subfwb  0x05, 0x1, 0x0   	SUBFWB	r0x05, F
000be4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000be6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000be8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000bea   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	42; timer.c	ciclos -= 14; //subtrai tempo de overhead(experimental)
000bec   0ef2     movlw   0xf2             	MOVLW	0xf2
000bee   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000bf0   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
000bf2   0601     decf    0x01, 0x1, 0x0   	DECF	r0x01, F
                                           ;	.line	43; timer.c	TMR0H = (ciclos >> 8);   //salva a parte alta
000bf4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000bf6   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000bf8   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000bfa   ee0f     lfsr    0x0, 0xfd7       	LFSR	0x00, 0xfd7
000bfc   f0d7
000bfe   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000c00   ffef
                                           ;	.line	44; timer.c	TMR0L = (ciclos & 0x00FF); // salva a parte baixa
000c02   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000c04   ee0f     lfsr    0x0, 0xfd6       	LFSR	0x00, 0xfd6
000c06   f0d6
000c08   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000c0a   ffef
                                           ;	.line	46; timer.c	BitClr(INTCON,2); //limpa a flag de overflow
000c0c   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
000c0e   f0f2
000c10   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000c12   f000
000c14   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
000c16   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
000c18   f0f2
000c1a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
000c1c   ffef
000c1e   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
000c20   f005
000c22   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
000c24   f004
000c26   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
000c28   f003
000c2a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000c2c   f002
000c2e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000c30   f001
000c32   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000c34   f000
000c36   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000c38   ffd9
000c3a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_timer__AguardaTimer	code
                                           _AguardaTimer:
                                           ;	.line	29; timer.c	void AguardaTimer(void)
001fc4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001fc6   ffe5
001fc8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001fca   ffd9
001fcc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001fce   ffe5
                                           _00110_DS_:
                                           ;	.line	31; timer.c	while(!BitTst(INTCON,2));
001fd0   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
001fd2   f0f2
001fd4   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001fd6   f000
001fd8   a400     btfss   0x00, 0x2, 0x0   	BTFSS	r0x00, 2
001fda   d7fa     bra     0x001fd0         	BRA	_00110_DS_
001fdc   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001fde   f000
001fe0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001fe2   ffd9
001fe4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_timer__FimTimer	code
                                           _FimTimer:
                                           ;	.line	24; timer.c	char FimTimer(void)
001fa0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001fa2   ffe5
001fa4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001fa6   ffd9
001fa8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001faa   ffe5
                                           ;	.line	26; timer.c	return BitTst(INTCON,2);
001fac   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
001fae   f0f2
001fb0   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001fb2   f000
001fb4   0e04     movlw   0x04             	MOVLW	0x04
001fb6   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
001fb8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001fba   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001fbc   f000
001fbe   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001fc0   ffd9
001fc2   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  310 (0x0136) bytes ( 0.24%)
                                           ;           	  155 (0x009b) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    6 (0x0006) bytes


                                           	end
