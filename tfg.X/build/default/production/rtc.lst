gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE  1


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

                      00001 ;--------------------------------------------------------
                      00002 ; File Created by SDCC : free open source ANSI-C Compiler
                      00003 ; Version 3.6.0 #9615 (MINGW32)
                      00004 ;--------------------------------------------------------
                      00005 ; PIC16 port for the Microchip 16-bit core micros
                      00006 ;--------------------------------------------------------
                      00007         list    p=18f4520
                      00008         radix   dec
                      00009 
                      00010 
                      00011 ;--------------------------------------------------------
                      00012 ; public variables in this module
                      00013 ;--------------------------------------------------------
  0000                00014         global  _rtcInit
  0000                00015         global  _ht1380write
  0000                00016         global  _ht1380read
  0000                00017         global  _rtcSetDateTime
  0000                00018         global  _rtcGetSeconds
  0000                00019         global  _rtcGetMinutes
  0000                00020         global  _rtcGetHours
  0000                00021         global  _rtcGetDate
  0000                00022         global  _rtcGetMonth
  0000                00023         global  _rtcGetYear
  0000                00024         global  _rtcGetDay
  0000                00025         global  _rtcPutSeconds
  0000                00026         global  _rtcPutMinutes
  0000                00027         global  _rtcPutHours
  0000                00028         global  _rtcPutDate
  0000                00029         global  _rtcPutMonth
  0000                00030         global  _rtcPutDay
  0000                00031         global  _rtcPutYear
  0000                00032         global  _de
  0000                00033         global  _rtcStart
  0000                00034         global  _writeByte
  0000                00035         global  _readByte
                      00036 
                      00037 ;--------------------------------------------------------
                      00038 ; extern variables in this module
                      00039 ;--------------------------------------------------------
  0000                00040         extern  __moduchar
  0000                00041         extern  __divuchar
                      00042 
                      00043 ;--------------------------------------------------------
                      00044 ;       Equates to used internal registers
                      00045 ;--------------------------------------------------------
  00000FD8            00046 STATUS  equ     0xfd8
  00000FE8            00047 WREG    equ     0xfe8
  00000FE1            00048 FSR1L   equ     0xfe1
  00000FD9            00049 FSR2L   equ     0xfd9
  00000FEF            00050 INDF0   equ     0xfef
  00000FE6            00051 POSTINC1        equ     0xfe6
  00000FE5            00052 POSTDEC1        equ     0xfe5
  00000FE4            00053 PREINC1 equ     0xfe4
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE  2


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

  00000FDB            00054 PLUSW2  equ     0xfdb
  00000FF3            00055 PRODL   equ     0xff3
                      00056 
                      00057 
                      00058 ; Internal registers
                      00059 .registers      udata_ovr       0x0000
000000                00060 r0x00   res     1
000001                00061 r0x01   res     1
000002                00062 r0x02   res     1
                      00063 
                      00064 udata_rtc_0     udata
000000                00065 _de     res     1
                      00066 
                      00067 ;--------------------------------------------------------
                      00068 ; global & static initialisations
                      00069 ;--------------------------------------------------------
                      00070 ; I code from now on!
                      00071 ; ; Starting pCode block
                      00072 S_rtc__rtcPutYear       code
000000                00073 _rtcPutYear:
                      00074 ;       .line   208; rtc.c      void rtcPutYear(unsigned char year) {
000000 CFD9 FFE5      00075         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00076         MOVFF   FSR1L, FSR2L
000008 C??? F???      00077         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00078         MOVFF   r0x01, POSTDEC1
000010 C??? F???      00079         MOVFF   r0x02, POSTDEC1
000014 0E02           00080         MOVLW   0x02
000016 CFDB F000      00081         MOVFF   PLUSW2, r0x00
                      00082 ;       .line   209; rtc.c      ht1380write(6, (year % 10) | ((year / 10) << 4));
00001A 0E0A           00083         MOVLW   0x0a
00001C 6EE5           00084         MOVWF   POSTDEC1
00001E C??? F???      00085         MOVFF   r0x00, POSTDEC1
000022 EC?? F0??      00086         CALL    __moduchar
000026 6E??           00087         MOVWF   r0x01
000028 50E4           00088         MOVF    PREINC1, W
00002A 50E4           00089         MOVF    PREINC1, W
00002C 0E0A           00090         MOVLW   0x0a
00002E 6EE5           00091         MOVWF   POSTDEC1
000030 C??? F???      00092         MOVFF   r0x00, POSTDEC1
000034 EC?? F0??      00093         CALL    __divuchar
000038 6E??           00094         MOVWF   r0x00
00003A 50E4           00095         MOVF    PREINC1, W
00003C 50E4           00096         MOVF    PREINC1, W
00003E 38??           00097         SWAPF   r0x00, W
000040 0BF0           00098         ANDLW   0xf0
000042 6E??           00099         MOVWF   r0x02
000044 50??           00100         MOVF    r0x02, W
000046 12??           00101         IORWF   r0x01, F
000048 50??           00102         MOVF    r0x01, W
00004A 6EE5           00103         MOVWF   POSTDEC1
00004C 0E06           00104         MOVLW   0x06
00004E 6EE5           00105         MOVWF   POSTDEC1
000050 EC?? F0??      00106         CALL    _ht1380write
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE  3


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

000054 52E6           00107         MOVF    POSTINC1, F
000056 52E6           00108         MOVF    POSTINC1, F
000058 CFE4 F000      00109         MOVFF   PREINC1, r0x02
00005C CFE4 F000      00110         MOVFF   PREINC1, r0x01
000060 CFE4 F000      00111         MOVFF   PREINC1, r0x00
000064 CFE4 FFD9      00112         MOVFF   PREINC1, FSR2L
000068 0012           00113         RETURN  
                      00114 
                      00115 ; ; Starting pCode block
                      00116 S_rtc__rtcPutDay        code
000000                00117 _rtcPutDay:
                      00118 ;       .line   204; rtc.c      void rtcPutDay(unsigned char day) {
000000 CFD9 FFE5      00119         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00120         MOVFF   FSR1L, FSR2L
000008 C??? F???      00121         MOVFF   r0x00, POSTDEC1
00000C 0E02           00122         MOVLW   0x02
00000E CFDB F000      00123         MOVFF   PLUSW2, r0x00
                      00124 ;       .line   205; rtc.c      ht1380write(5, day);
000012 50??           00125         MOVF    r0x00, W
000014 6EE5           00126         MOVWF   POSTDEC1
000016 0E05           00127         MOVLW   0x05
000018 6EE5           00128         MOVWF   POSTDEC1
00001A EC?? F0??      00129         CALL    _ht1380write
00001E 52E6           00130         MOVF    POSTINC1, F
000020 52E6           00131         MOVF    POSTINC1, F
000022 CFE4 F000      00132         MOVFF   PREINC1, r0x00
000026 CFE4 FFD9      00133         MOVFF   PREINC1, FSR2L
00002A 0012           00134         RETURN  
                      00135 
                      00136 ; ; Starting pCode block
                      00137 S_rtc__rtcPutMonth      code
000000                00138 _rtcPutMonth:
                      00139 ;       .line   200; rtc.c      void rtcPutMonth(unsigned char month) {
000000 CFD9 FFE5      00140         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00141         MOVFF   FSR1L, FSR2L
000008 C??? F???      00142         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00143         MOVFF   r0x01, POSTDEC1
000010 C??? F???      00144         MOVFF   r0x02, POSTDEC1
000014 0E02           00145         MOVLW   0x02
000016 CFDB F000      00146         MOVFF   PLUSW2, r0x00
                      00147 ;       .line   201; rtc.c      ht1380write(4, (month % 10) | ((month / 10) << 4));
00001A 0E0A           00148         MOVLW   0x0a
00001C 6EE5           00149         MOVWF   POSTDEC1
00001E C??? F???      00150         MOVFF   r0x00, POSTDEC1
000022 EC?? F0??      00151         CALL    __moduchar
000026 6E??           00152         MOVWF   r0x01
000028 50E4           00153         MOVF    PREINC1, W
00002A 50E4           00154         MOVF    PREINC1, W
00002C 0E0A           00155         MOVLW   0x0a
00002E 6EE5           00156         MOVWF   POSTDEC1
000030 C??? F???      00157         MOVFF   r0x00, POSTDEC1
000034 EC?? F0??      00158         CALL    __divuchar
000038 6E??           00159         MOVWF   r0x00
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE  4


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

00003A 50E4           00160         MOVF    PREINC1, W
00003C 50E4           00161         MOVF    PREINC1, W
00003E 38??           00162         SWAPF   r0x00, W
000040 0BF0           00163         ANDLW   0xf0
000042 6E??           00164         MOVWF   r0x02
000044 50??           00165         MOVF    r0x02, W
000046 12??           00166         IORWF   r0x01, F
000048 50??           00167         MOVF    r0x01, W
00004A 6EE5           00168         MOVWF   POSTDEC1
00004C 0E04           00169         MOVLW   0x04
00004E 6EE5           00170         MOVWF   POSTDEC1
000050 EC?? F0??      00171         CALL    _ht1380write
000054 52E6           00172         MOVF    POSTINC1, F
000056 52E6           00173         MOVF    POSTINC1, F
000058 CFE4 F000      00174         MOVFF   PREINC1, r0x02
00005C CFE4 F000      00175         MOVFF   PREINC1, r0x01
000060 CFE4 F000      00176         MOVFF   PREINC1, r0x00
000064 CFE4 FFD9      00177         MOVFF   PREINC1, FSR2L
000068 0012           00178         RETURN  
                      00179 
                      00180 ; ; Starting pCode block
                      00181 S_rtc__rtcPutDate       code
000000                00182 _rtcPutDate:
                      00183 ;       .line   196; rtc.c      void rtcPutDate(unsigned char date) {
000000 CFD9 FFE5      00184         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00185         MOVFF   FSR1L, FSR2L
000008 C??? F???      00186         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00187         MOVFF   r0x01, POSTDEC1
000010 C??? F???      00188         MOVFF   r0x02, POSTDEC1
000014 0E02           00189         MOVLW   0x02
000016 CFDB F000      00190         MOVFF   PLUSW2, r0x00
                      00191 ;       .line   197; rtc.c      ht1380write(3, (date % 10) | ((date / 10) << 4));
00001A 0E0A           00192         MOVLW   0x0a
00001C 6EE5           00193         MOVWF   POSTDEC1
00001E C??? F???      00194         MOVFF   r0x00, POSTDEC1
000022 EC?? F0??      00195         CALL    __moduchar
000026 6E??           00196         MOVWF   r0x01
000028 50E4           00197         MOVF    PREINC1, W
00002A 50E4           00198         MOVF    PREINC1, W
00002C 0E0A           00199         MOVLW   0x0a
00002E 6EE5           00200         MOVWF   POSTDEC1
000030 C??? F???      00201         MOVFF   r0x00, POSTDEC1
000034 EC?? F0??      00202         CALL    __divuchar
000038 6E??           00203         MOVWF   r0x00
00003A 50E4           00204         MOVF    PREINC1, W
00003C 50E4           00205         MOVF    PREINC1, W
00003E 38??           00206         SWAPF   r0x00, W
000040 0BF0           00207         ANDLW   0xf0
000042 6E??           00208         MOVWF   r0x02
000044 50??           00209         MOVF    r0x02, W
000046 12??           00210         IORWF   r0x01, F
000048 50??           00211         MOVF    r0x01, W
00004A 6EE5           00212         MOVWF   POSTDEC1
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE  5


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

00004C 0E03           00213         MOVLW   0x03
00004E 6EE5           00214         MOVWF   POSTDEC1
000050 EC?? F0??      00215         CALL    _ht1380write
000054 52E6           00216         MOVF    POSTINC1, F
000056 52E6           00217         MOVF    POSTINC1, F
000058 CFE4 F000      00218         MOVFF   PREINC1, r0x02
00005C CFE4 F000      00219         MOVFF   PREINC1, r0x01
000060 CFE4 F000      00220         MOVFF   PREINC1, r0x00
000064 CFE4 FFD9      00221         MOVFF   PREINC1, FSR2L
000068 0012           00222         RETURN  
                      00223 
                      00224 ; ; Starting pCode block
                      00225 S_rtc__rtcPutHours      code
000000                00226 _rtcPutHours:
                      00227 ;       .line   192; rtc.c      void rtcPutHours(unsigned char hours) {
000000 CFD9 FFE5      00228         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00229         MOVFF   FSR1L, FSR2L
000008 C??? F???      00230         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00231         MOVFF   r0x01, POSTDEC1
000010 C??? F???      00232         MOVFF   r0x02, POSTDEC1
000014 0E02           00233         MOVLW   0x02
000016 CFDB F000      00234         MOVFF   PLUSW2, r0x00
                      00235 ;       .line   193; rtc.c      ht1380write(2, (hours % 10) | ((hours / 10) << 4));
00001A 0E0A           00236         MOVLW   0x0a
00001C 6EE5           00237         MOVWF   POSTDEC1
00001E C??? F???      00238         MOVFF   r0x00, POSTDEC1
000022 EC?? F0??      00239         CALL    __moduchar
000026 6E??           00240         MOVWF   r0x01
000028 50E4           00241         MOVF    PREINC1, W
00002A 50E4           00242         MOVF    PREINC1, W
00002C 0E0A           00243         MOVLW   0x0a
00002E 6EE5           00244         MOVWF   POSTDEC1
000030 C??? F???      00245         MOVFF   r0x00, POSTDEC1
000034 EC?? F0??      00246         CALL    __divuchar
000038 6E??           00247         MOVWF   r0x00
00003A 50E4           00248         MOVF    PREINC1, W
00003C 50E4           00249         MOVF    PREINC1, W
00003E 38??           00250         SWAPF   r0x00, W
000040 0BF0           00251         ANDLW   0xf0
000042 6E??           00252         MOVWF   r0x02
000044 50??           00253         MOVF    r0x02, W
000046 12??           00254         IORWF   r0x01, F
000048 50??           00255         MOVF    r0x01, W
00004A 6EE5           00256         MOVWF   POSTDEC1
00004C 0E02           00257         MOVLW   0x02
00004E 6EE5           00258         MOVWF   POSTDEC1
000050 EC?? F0??      00259         CALL    _ht1380write
000054 52E6           00260         MOVF    POSTINC1, F
000056 52E6           00261         MOVF    POSTINC1, F
000058 CFE4 F000      00262         MOVFF   PREINC1, r0x02
00005C CFE4 F000      00263         MOVFF   PREINC1, r0x01
000060 CFE4 F000      00264         MOVFF   PREINC1, r0x00
000064 CFE4 FFD9      00265         MOVFF   PREINC1, FSR2L
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE  6


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

000068 0012           00266         RETURN  
                      00267 
                      00268 ; ; Starting pCode block
                      00269 S_rtc__rtcPutMinutes    code
000000                00270 _rtcPutMinutes:
                      00271 ;       .line   188; rtc.c      void rtcPutMinutes(unsigned char minutes) {
000000 CFD9 FFE5      00272         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00273         MOVFF   FSR1L, FSR2L
000008 C??? F???      00274         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00275         MOVFF   r0x01, POSTDEC1
000010 C??? F???      00276         MOVFF   r0x02, POSTDEC1
000014 0E02           00277         MOVLW   0x02
000016 CFDB F000      00278         MOVFF   PLUSW2, r0x00
                      00279 ;       .line   189; rtc.c      ht1380write(1, (minutes % 10) | ((minutes / 10) << 4));
00001A 0E0A           00280         MOVLW   0x0a
00001C 6EE5           00281         MOVWF   POSTDEC1
00001E C??? F???      00282         MOVFF   r0x00, POSTDEC1
000022 EC?? F0??      00283         CALL    __moduchar
000026 6E??           00284         MOVWF   r0x01
000028 50E4           00285         MOVF    PREINC1, W
00002A 50E4           00286         MOVF    PREINC1, W
00002C 0E0A           00287         MOVLW   0x0a
00002E 6EE5           00288         MOVWF   POSTDEC1
000030 C??? F???      00289         MOVFF   r0x00, POSTDEC1
000034 EC?? F0??      00290         CALL    __divuchar
000038 6E??           00291         MOVWF   r0x00
00003A 50E4           00292         MOVF    PREINC1, W
00003C 50E4           00293         MOVF    PREINC1, W
00003E 38??           00294         SWAPF   r0x00, W
000040 0BF0           00295         ANDLW   0xf0
000042 6E??           00296         MOVWF   r0x02
000044 50??           00297         MOVF    r0x02, W
000046 12??           00298         IORWF   r0x01, F
000048 50??           00299         MOVF    r0x01, W
00004A 6EE5           00300         MOVWF   POSTDEC1
00004C 0E01           00301         MOVLW   0x01
00004E 6EE5           00302         MOVWF   POSTDEC1
000050 EC?? F0??      00303         CALL    _ht1380write
000054 52E6           00304         MOVF    POSTINC1, F
000056 52E6           00305         MOVF    POSTINC1, F
000058 CFE4 F000      00306         MOVFF   PREINC1, r0x02
00005C CFE4 F000      00307         MOVFF   PREINC1, r0x01
000060 CFE4 F000      00308         MOVFF   PREINC1, r0x00
000064 CFE4 FFD9      00309         MOVFF   PREINC1, FSR2L
000068 0012           00310         RETURN  
                      00311 
                      00312 ; ; Starting pCode block
                      00313 S_rtc__rtcPutSeconds    code
000000                00314 _rtcPutSeconds:
                      00315 ;       .line   184; rtc.c      void rtcPutSeconds(unsigned char seconds) {
000000 CFD9 FFE5      00316         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00317         MOVFF   FSR1L, FSR2L
000008 C??? F???      00318         MOVFF   r0x00, POSTDEC1
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE  7


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

00000C C??? F???      00319         MOVFF   r0x01, POSTDEC1
000010 C??? F???      00320         MOVFF   r0x02, POSTDEC1
000014 0E02           00321         MOVLW   0x02
000016 CFDB F000      00322         MOVFF   PLUSW2, r0x00
                      00323 ;       .line   185; rtc.c      ht1380write(0, (seconds % 10) | ((seconds / 10) << 4));
00001A 0E0A           00324         MOVLW   0x0a
00001C 6EE5           00325         MOVWF   POSTDEC1
00001E C??? F???      00326         MOVFF   r0x00, POSTDEC1
000022 EC?? F0??      00327         CALL    __moduchar
000026 6E??           00328         MOVWF   r0x01
000028 50E4           00329         MOVF    PREINC1, W
00002A 50E4           00330         MOVF    PREINC1, W
00002C 0E0A           00331         MOVLW   0x0a
00002E 6EE5           00332         MOVWF   POSTDEC1
000030 C??? F???      00333         MOVFF   r0x00, POSTDEC1
000034 EC?? F0??      00334         CALL    __divuchar
000038 6E??           00335         MOVWF   r0x00
00003A 50E4           00336         MOVF    PREINC1, W
00003C 50E4           00337         MOVF    PREINC1, W
00003E 38??           00338         SWAPF   r0x00, W
000040 0BF0           00339         ANDLW   0xf0
000042 6E??           00340         MOVWF   r0x02
000044 50??           00341         MOVF    r0x02, W
000046 12??           00342         IORWF   r0x01, F
000048 50??           00343         MOVF    r0x01, W
00004A 6EE5           00344         MOVWF   POSTDEC1
00004C 0E00           00345         MOVLW   0x00
00004E 6EE5           00346         MOVWF   POSTDEC1
000050 EC?? F0??      00347         CALL    _ht1380write
000054 52E6           00348         MOVF    POSTINC1, F
000056 52E6           00349         MOVF    POSTINC1, F
000058 CFE4 F000      00350         MOVFF   PREINC1, r0x02
00005C CFE4 F000      00351         MOVFF   PREINC1, r0x01
000060 CFE4 F000      00352         MOVFF   PREINC1, r0x00
000064 CFE4 FFD9      00353         MOVFF   PREINC1, FSR2L
000068 0012           00354         RETURN  
                      00355 
                      00356 ; ; Starting pCode block
                      00357 S_rtc__rtcGetDay        code
000000                00358 _rtcGetDay:
                      00359 ;       .line   168; rtc.c      unsigned char rtcGetDay(void) {
000000 CFD9 FFE5      00360         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00361         MOVFF   FSR1L, FSR2L
000008 C??? F???      00362         MOVFF   r0x00, POSTDEC1
                      00363 ;       .line   170; rtc.c      value = ht1380read(5);
00000C 0E05           00364         MOVLW   0x05
00000E 6EE5           00365         MOVWF   POSTDEC1
000010 EC?? F0??      00366         CALL    _ht1380read
000014 6E??           00367         MOVWF   r0x00
000016 52E6           00368         MOVF    POSTINC1, F
                      00369 ;       .line   171; rtc.c      return (value & 0x0f); // 1..7
000018 0E0F           00370         MOVLW   0x0f
00001A 16??           00371         ANDWF   r0x00, F
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE  8


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

00001C 50??           00372         MOVF    r0x00, W
00001E CFE4 F000      00373         MOVFF   PREINC1, r0x00
000022 CFE4 FFD9      00374         MOVFF   PREINC1, FSR2L
000026 0012           00375         RETURN  
                      00376 
                      00377 ; ; Starting pCode block
                      00378 S_rtc__rtcGetYear       code
000000                00379 _rtcGetYear:
                      00380 ;       .line   162; rtc.c      unsigned char rtcGetYear(void) {
000000 CFD9 FFE5      00381         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00382         MOVFF   FSR1L, FSR2L
000008 C??? F???      00383         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00384         MOVFF   r0x01, POSTDEC1
                      00385 ;       .line   164; rtc.c      value = ht1380read(6);
000010 0E06           00386         MOVLW   0x06
000012 6EE5           00387         MOVWF   POSTDEC1
000014 EC?? F0??      00388         CALL    _ht1380read
000018 6E??           00389         MOVWF   r0x00
00001A 52E6           00390         MOVF    POSTINC1, F
                      00391 ;       .line   165; rtc.c      return (((value >> 4)&0x0f)*10 + (value & 0x0f));
00001C 38??           00392         SWAPF   r0x00, W
00001E 0B0F           00393         ANDLW   0x0f
000020 6E??           00394         MOVWF   r0x01
000022 0E0F           00395         MOVLW   0x0f
000024 16??           00396         ANDWF   r0x01, F
                      00397 ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
000026 50??           00398         MOVF    r0x01, W
000028 0D0A           00399         MULLW   0x0a
00002A CFF3 F000      00400         MOVFF   PRODL, r0x01
00002E 0E0F           00401         MOVLW   0x0f
000030 16??           00402         ANDWF   r0x00, F
000032 50??           00403         MOVF    r0x00, W
000034 26??           00404         ADDWF   r0x01, F
000036 50??           00405         MOVF    r0x01, W
000038 CFE4 F000      00406         MOVFF   PREINC1, r0x01
00003C CFE4 F000      00407         MOVFF   PREINC1, r0x00
000040 CFE4 FFD9      00408         MOVFF   PREINC1, FSR2L
000044 0012           00409         RETURN  
                      00410 
                      00411 ; ; Starting pCode block
                      00412 S_rtc__rtcGetMonth      code
000000                00413 _rtcGetMonth:
                      00414 ;       .line   156; rtc.c      unsigned char rtcGetMonth(void) {
000000 CFD9 FFE5      00415         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00416         MOVFF   FSR1L, FSR2L
000008 C??? F???      00417         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00418         MOVFF   r0x01, POSTDEC1
                      00419 ;       .line   158; rtc.c      value = ht1380read(4);
000010 0E04           00420         MOVLW   0x04
000012 6EE5           00421         MOVWF   POSTDEC1
000014 EC?? F0??      00422         CALL    _ht1380read
000018 6E??           00423         MOVWF   r0x00
00001A 52E6           00424         MOVF    POSTINC1, F
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE  9


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

                      00425 ;       .line   159; rtc.c      return (((value >> 4)&0x01)*10 + (value & 0x0f));
00001C 50??           00426         MOVF    r0x00, W
00001E 0B10           00427         ANDLW   0x10
000020 38E8           00428         SWAPF   WREG, W
000022 6E??           00429         MOVWF   r0x01
                      00430 ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
000024 50??           00431         MOVF    r0x01, W
000026 0D0A           00432         MULLW   0x0a
000028 CFF3 F000      00433         MOVFF   PRODL, r0x01
00002C 0E0F           00434         MOVLW   0x0f
00002E 16??           00435         ANDWF   r0x00, F
000030 50??           00436         MOVF    r0x00, W
000032 26??           00437         ADDWF   r0x01, F
000034 50??           00438         MOVF    r0x01, W
000036 CFE4 F000      00439         MOVFF   PREINC1, r0x01
00003A CFE4 F000      00440         MOVFF   PREINC1, r0x00
00003E CFE4 FFD9      00441         MOVFF   PREINC1, FSR2L
000042 0012           00442         RETURN  
                      00443 
                      00444 ; ; Starting pCode block
                      00445 S_rtc__rtcGetDate       code
000000                00446 _rtcGetDate:
                      00447 ;       .line   150; rtc.c      unsigned char rtcGetDate(void) {
000000 CFD9 FFE5      00448         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00449         MOVFF   FSR1L, FSR2L
000008 C??? F???      00450         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00451         MOVFF   r0x01, POSTDEC1
                      00452 ;       .line   152; rtc.c      value = ht1380read(3);
000010 0E03           00453         MOVLW   0x03
000012 6EE5           00454         MOVWF   POSTDEC1
000014 EC?? F0??      00455         CALL    _ht1380read
000018 6E??           00456         MOVWF   r0x00
00001A 52E6           00457         MOVF    POSTINC1, F
                      00458 ;       .line   153; rtc.c      return (((value >> 4)&0x03)*10 + (value & 0x0f));
00001C 38??           00459         SWAPF   r0x00, W
00001E 0B0F           00460         ANDLW   0x0f
000020 6E??           00461         MOVWF   r0x01
000022 0E03           00462         MOVLW   0x03
000024 16??           00463         ANDWF   r0x01, F
                      00464 ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
000026 50??           00465         MOVF    r0x01, W
000028 0D0A           00466         MULLW   0x0a
00002A CFF3 F000      00467         MOVFF   PRODL, r0x01
00002E 0E0F           00468         MOVLW   0x0f
000030 16??           00469         ANDWF   r0x00, F
000032 50??           00470         MOVF    r0x00, W
000034 26??           00471         ADDWF   r0x01, F
000036 50??           00472         MOVF    r0x01, W
000038 CFE4 F000      00473         MOVFF   PREINC1, r0x01
00003C CFE4 F000      00474         MOVFF   PREINC1, r0x00
000040 CFE4 FFD9      00475         MOVFF   PREINC1, FSR2L
000044 0012           00476         RETURN  
                      00477 
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE 10


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

                      00478 ; ; Starting pCode block
                      00479 S_rtc__rtcGetHours      code
000000                00480 _rtcGetHours:
                      00481 ;       .line   144; rtc.c      unsigned char rtcGetHours(void) {
000000 CFD9 FFE5      00482         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00483         MOVFF   FSR1L, FSR2L
000008 C??? F???      00484         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00485         MOVFF   r0x01, POSTDEC1
                      00486 ;       .line   146; rtc.c      value = ht1380read(2);
000010 0E02           00487         MOVLW   0x02
000012 6EE5           00488         MOVWF   POSTDEC1
000014 EC?? F0??      00489         CALL    _ht1380read
000018 6E??           00490         MOVWF   r0x00
00001A 52E6           00491         MOVF    POSTINC1, F
                      00492 ;       .line   147; rtc.c      return (((value >> 4)&0x03)*10 + (value & 0x0f));
00001C 38??           00493         SWAPF   r0x00, W
00001E 0B0F           00494         ANDLW   0x0f
000020 6E??           00495         MOVWF   r0x01
000022 0E03           00496         MOVLW   0x03
000024 16??           00497         ANDWF   r0x01, F
                      00498 ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
000026 50??           00499         MOVF    r0x01, W
000028 0D0A           00500         MULLW   0x0a
00002A CFF3 F000      00501         MOVFF   PRODL, r0x01
00002E 0E0F           00502         MOVLW   0x0f
000030 16??           00503         ANDWF   r0x00, F
000032 50??           00504         MOVF    r0x00, W
000034 26??           00505         ADDWF   r0x01, F
000036 50??           00506         MOVF    r0x01, W
000038 CFE4 F000      00507         MOVFF   PREINC1, r0x01
00003C CFE4 F000      00508         MOVFF   PREINC1, r0x00
000040 CFE4 FFD9      00509         MOVFF   PREINC1, FSR2L
000044 0012           00510         RETURN  
                      00511 
                      00512 ; ; Starting pCode block
                      00513 S_rtc__rtcGetMinutes    code
000000                00514 _rtcGetMinutes:
                      00515 ;       .line   138; rtc.c      unsigned char rtcGetMinutes(void) {
000000 CFD9 FFE5      00516         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00517         MOVFF   FSR1L, FSR2L
000008 C??? F???      00518         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00519         MOVFF   r0x01, POSTDEC1
                      00520 ;       .line   140; rtc.c      value = ht1380read(1);
000010 0E01           00521         MOVLW   0x01
000012 6EE5           00522         MOVWF   POSTDEC1
000014 EC?? F0??      00523         CALL    _ht1380read
000018 6E??           00524         MOVWF   r0x00
00001A 52E6           00525         MOVF    POSTINC1, F
                      00526 ;       .line   141; rtc.c      return (((value >> 4)&0x07)*10 + (value & 0x0f));
00001C 38??           00527         SWAPF   r0x00, W
00001E 0B0F           00528         ANDLW   0x0f
000020 6E??           00529         MOVWF   r0x01
000022 0E07           00530         MOVLW   0x07
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE 11


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

000024 16??           00531         ANDWF   r0x01, F
                      00532 ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
000026 50??           00533         MOVF    r0x01, W
000028 0D0A           00534         MULLW   0x0a
00002A CFF3 F000      00535         MOVFF   PRODL, r0x01
00002E 0E0F           00536         MOVLW   0x0f
000030 16??           00537         ANDWF   r0x00, F
000032 50??           00538         MOVF    r0x00, W
000034 26??           00539         ADDWF   r0x01, F
000036 50??           00540         MOVF    r0x01, W
000038 CFE4 F000      00541         MOVFF   PREINC1, r0x01
00003C CFE4 F000      00542         MOVFF   PREINC1, r0x00
000040 CFE4 FFD9      00543         MOVFF   PREINC1, FSR2L
000044 0012           00544         RETURN  
                      00545 
                      00546 ; ; Starting pCode block
                      00547 S_rtc__rtcGetSeconds    code
000000                00548 _rtcGetSeconds:
                      00549 ;       .line   131; rtc.c      unsigned char rtcGetSeconds(void) {
000000 CFD9 FFE5      00550         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00551         MOVFF   FSR1L, FSR2L
000008 C??? F???      00552         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00553         MOVFF   r0x01, POSTDEC1
                      00554 ;       .line   133; rtc.c      value = ht1380read(0); // read seconds
000010 0E00           00555         MOVLW   0x00
000012 6EE5           00556         MOVWF   POSTDEC1
000014 EC?? F0??      00557         CALL    _ht1380read
000018 6E??           00558         MOVWF   r0x00
00001A 52E6           00559         MOVF    POSTINC1, F
                      00560 ;       .line   134; rtc.c      return (((value >> 4)&0x07)*10 + (value & 0x0f));
00001C 38??           00561         SWAPF   r0x00, W
00001E 0B0F           00562         ANDLW   0x0f
000020 6E??           00563         MOVWF   r0x01
000022 0E07           00564         MOVLW   0x07
000024 16??           00565         ANDWF   r0x01, F
                      00566 ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
000026 50??           00567         MOVF    r0x01, W
000028 0D0A           00568         MULLW   0x0a
00002A CFF3 F000      00569         MOVFF   PRODL, r0x01
00002E 0E0F           00570         MOVLW   0x0f
000030 16??           00571         ANDWF   r0x00, F
000032 50??           00572         MOVF    r0x00, W
000034 26??           00573         ADDWF   r0x01, F
000036 50??           00574         MOVF    r0x01, W
000038 CFE4 F000      00575         MOVFF   PREINC1, r0x01
00003C CFE4 F000      00576         MOVFF   PREINC1, r0x00
000040 CFE4 FFD9      00577         MOVFF   PREINC1, FSR2L
000044 0012           00578         RETURN  
                      00579 
                      00580 ; ; Starting pCode block
                      00581 S_rtc__rtcSetDateTime   code
000000                00582 _rtcSetDateTime:
                      00583 ;       .line   119; rtc.c      void rtcSetDateTime(void) {
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE 12


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

000000 CFD9 FFE5      00584         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00585         MOVFF   FSR1L, FSR2L
                      00586 ;       .line   121; rtc.c      ht1380write(7, 0); //disable write protection
000008 0E00           00587         MOVLW   0x00
00000A 6EE5           00588         MOVWF   POSTDEC1
00000C 0E07           00589         MOVLW   0x07
00000E 6EE5           00590         MOVWF   POSTDEC1
000010 EC?? F0??      00591         CALL    _ht1380write
000014 52E6           00592         MOVF    POSTINC1, F
000016 52E6           00593         MOVF    POSTINC1, F
                      00594 ;       .line   122; rtc.c      ht1380write(0, 0x0); //sec
000018 0E00           00595         MOVLW   0x00
00001A 6EE5           00596         MOVWF   POSTDEC1
00001C 0E00           00597         MOVLW   0x00
00001E 6EE5           00598         MOVWF   POSTDEC1
000020 EC?? F0??      00599         CALL    _ht1380write
000024 52E6           00600         MOVF    POSTINC1, F
000026 52E6           00601         MOVF    POSTINC1, F
                      00602 ;       .line   123; rtc.c      ht1380write(1, 0x21); //min
000028 0E21           00603         MOVLW   0x21
00002A 6EE5           00604         MOVWF   POSTDEC1
00002C 0E01           00605         MOVLW   0x01
00002E 6EE5           00606         MOVWF   POSTDEC1
000030 EC?? F0??      00607         CALL    _ht1380write
000034 52E6           00608         MOVF    POSTINC1, F
000036 52E6           00609         MOVF    POSTINC1, F
                      00610 ;       .line   124; rtc.c      ht1380write(2, 0x23); //hora
000038 0E23           00611         MOVLW   0x23
00003A 6EE5           00612         MOVWF   POSTDEC1
00003C 0E02           00613         MOVLW   0x02
00003E 6EE5           00614         MOVWF   POSTDEC1
000040 EC?? F0??      00615         CALL    _ht1380write
000044 52E6           00616         MOVF    POSTINC1, F
000046 52E6           00617         MOVF    POSTINC1, F
                      00618 ;       .line   125; rtc.c      ht1380write(3, 0x28); //dia
000048 0E28           00619         MOVLW   0x28
00004A 6EE5           00620         MOVWF   POSTDEC1
00004C 0E03           00621         MOVLW   0x03
00004E 6EE5           00622         MOVWF   POSTDEC1
000050 EC?? F0??      00623         CALL    _ht1380write
000054 52E6           00624         MOVF    POSTINC1, F
000056 52E6           00625         MOVF    POSTINC1, F
                      00626 ;       .line   126; rtc.c      ht1380write(4, 0x10); //mes
000058 0E10           00627         MOVLW   0x10
00005A 6EE5           00628         MOVWF   POSTDEC1
00005C 0E04           00629         MOVLW   0x04
00005E 6EE5           00630         MOVWF   POSTDEC1
000060 EC?? F0??      00631         CALL    _ht1380write
000064 52E6           00632         MOVF    POSTINC1, F
000066 52E6           00633         MOVF    POSTINC1, F
                      00634 ;       .line   127; rtc.c      ht1380write(5, 0x6); //dia semana
000068 0E06           00635         MOVLW   0x06
00006A 6EE5           00636         MOVWF   POSTDEC1
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE 13


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

00006C 0E05           00637         MOVLW   0x05
00006E 6EE5           00638         MOVWF   POSTDEC1
000070 EC?? F0??      00639         CALL    _ht1380write
000074 52E6           00640         MOVF    POSTINC1, F
000076 52E6           00641         MOVF    POSTINC1, F
                      00642 ;       .line   128; rtc.c      ht1380write(6, 0x12); //ano
000078 0E12           00643         MOVLW   0x12
00007A 6EE5           00644         MOVWF   POSTDEC1
00007C 0E06           00645         MOVLW   0x06
00007E 6EE5           00646         MOVWF   POSTDEC1
000080 EC?? F0??      00647         CALL    _ht1380write
000084 52E6           00648         MOVF    POSTINC1, F
000086 52E6           00649         MOVF    POSTINC1, F
000088 CFE4 FFD9      00650         MOVFF   PREINC1, FSR2L
00008C 0012           00651         RETURN  
                      00652 
                      00653 ; ; Starting pCode block
                      00654 S_rtc__ht1380read       code
000000                00655 _ht1380read:
                      00656 ;       .line   99; rtc.c       unsigned char ht1380read(unsigned char addr) {
000000 CFD9 FFE5      00657         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00658         MOVFF   FSR1L, FSR2L
000008 C??? F???      00659         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00660         MOVFF   r0x01, POSTDEC1
000010 0E02           00661         MOVLW   0x02
000012 CFDB F000      00662         MOVFF   PLUSW2, r0x00
                      00663 ;       .line   102; rtc.c      SCL_OFF();
000016 EE0F F082      00664         LFSR    0x00, 0xf82
00001A CFEF F000      00665         MOVFF   INDF0, r0x01
00001E 96??           00666         BCF     r0x01, 3
000020 EE0F F082      00667         LFSR    0x00, 0xf82
000024 C??? F???      00668         MOVFF   r0x01, INDF0
                      00669 ;       .line   103; rtc.c      SDA_OFF();
000028 EE0F F082      00670         LFSR    0x00, 0xf82
00002C CFEF F000      00671         MOVFF   INDF0, r0x01
000030 98??           00672         BCF     r0x01, 4
000032 EE0F F082      00673         LFSR    0x00, 0xf82
000036 C??? F???      00674         MOVFF   r0x01, INDF0
                      00675 ;       .line   106; rtc.c      addr <<= 1;   //corrige endere?o
00003A 90D8           00676         BCF     STATUS, 0
00003C 36??           00677         RLCF    r0x00, F
                      00678 ;       .line   107; rtc.c      addr |= 0x81; //liga bit de leitura e hab. clk
00003E 0E81           00679         MOVLW   0x81
000040 12??           00680         IORWF   r0x00, F
                      00681 ;       .line   108; rtc.c      writeByte(addr);
000042 50??           00682         MOVF    r0x00, W
000044 6EE5           00683         MOVWF   POSTDEC1
000046 EC?? F0??      00684         CALL    _writeByte
00004A 52E6           00685         MOVF    POSTINC1, F
                      00686 ;       .line   109; rtc.c      SDA_IN();
00004C EE0F F094      00687         LFSR    0x00, 0xf94
000050 CFEF F000      00688         MOVFF   INDF0, r0x00
000054 88??           00689         BSF     r0x00, 4
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE 14


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

000056 EE0F F094      00690         LFSR    0x00, 0xf94
00005A C??? F???      00691         MOVFF   r0x00, INDF0
                      00692 ;       .line   110; rtc.c      DELAY();DELAY();DELAY();DELAY();
00005E 0E64           00693         MOVLW   0x64
000060 010?           00694         BANKSEL _de
000062 6F??           00695         MOVWF   _de, B
000064                00696 _00217_DS_:
000064 010?           00697         BANKSEL _de
000066 07??           00698         DECF    _de, F, B
000068 010?           00699         BANKSEL _de
00006A 51??           00700         MOVF    _de, W, B
00006C E1??           00701         BNZ     _00217_DS_
00006E 0E64           00702         MOVLW   0x64
000070 010?           00703         BANKSEL _de
000072 6F??           00704         MOVWF   _de, B
000074                00705 _00220_DS_:
000074 010?           00706         BANKSEL _de
000076 07??           00707         DECF    _de, F, B
000078 010?           00708         BANKSEL _de
00007A 51??           00709         MOVF    _de, W, B
00007C E1??           00710         BNZ     _00220_DS_
00007E 0E64           00711         MOVLW   0x64
000080 010?           00712         BANKSEL _de
000082 6F??           00713         MOVWF   _de, B
000084                00714 _00223_DS_:
000084 010?           00715         BANKSEL _de
000086 07??           00716         DECF    _de, F, B
000088 010?           00717         BANKSEL _de
00008A 51??           00718         MOVF    _de, W, B
00008C E1??           00719         BNZ     _00223_DS_
00008E 0E64           00720         MOVLW   0x64
000090 010?           00721         BANKSEL _de
000092 6F??           00722         MOVWF   _de, B
000094                00723 _00226_DS_:
000094 010?           00724         BANKSEL _de
000096 07??           00725         DECF    _de, F, B
000098 010?           00726         BANKSEL _de
00009A 51??           00727         MOVF    _de, W, B
00009C E1??           00728         BNZ     _00226_DS_
00009E 0E64           00729         MOVLW   0x64
0000A0 010?           00730         BANKSEL _de
0000A2 6F??           00731         MOVWF   _de, B
                      00732 ;       .line   111; rtc.c      dados = readByte();
0000A4 EC?? F0??      00733         CALL    _readByte
0000A8 6E??           00734         MOVWF   r0x00
                      00735 ;       .line   113; rtc.c      SCL_OFF();
0000AA EE0F F082      00736         LFSR    0x00, 0xf82
0000AE CFEF F000      00737         MOVFF   INDF0, r0x01
0000B2 96??           00738         BCF     r0x01, 3
0000B4 EE0F F082      00739         LFSR    0x00, 0xf82
0000B8 C??? F???      00740         MOVFF   r0x01, INDF0
                      00741 ;       .line   114; rtc.c      SDA_OFF();
0000BC EE0F F082      00742         LFSR    0x00, 0xf82
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE 15


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

0000C0 CFEF F000      00743         MOVFF   INDF0, r0x01
0000C4 98??           00744         BCF     r0x01, 4
0000C6 EE0F F082      00745         LFSR    0x00, 0xf82
0000CA C??? F???      00746         MOVFF   r0x01, INDF0
                      00747 ;       .line   115; rtc.c      SDA_OUT();
0000CE EE0F F094      00748         LFSR    0x00, 0xf94
0000D2 CFEF F000      00749         MOVFF   INDF0, r0x01
0000D6 98??           00750         BCF     r0x01, 4
0000D8 EE0F F094      00751         LFSR    0x00, 0xf94
0000DC C??? F???      00752         MOVFF   r0x01, INDF0
                      00753 ;       .line   116; rtc.c      return dados;
0000E0 50??           00754         MOVF    r0x00, W
0000E2 CFE4 F000      00755         MOVFF   PREINC1, r0x01
0000E6 CFE4 F000      00756         MOVFF   PREINC1, r0x00
0000EA CFE4 FFD9      00757         MOVFF   PREINC1, FSR2L
0000EE 0012           00758         RETURN  
                      00759 
                      00760 ; ; Starting pCode block
                      00761 S_rtc__ht1380write      code
000000                00762 _ht1380write:
                      00763 ;       .line   82; rtc.c       void ht1380write(unsigned char addr, unsigned char dados) {
000000 CFD9 FFE5      00764         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00765         MOVFF   FSR1L, FSR2L
000008 C??? F???      00766         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00767         MOVFF   r0x01, POSTDEC1
000010 C??? F???      00768         MOVFF   r0x02, POSTDEC1
000014 0E02           00769         MOVLW   0x02
000016 CFDB F000      00770         MOVFF   PLUSW2, r0x00
00001A 0E03           00771         MOVLW   0x03
00001C CFDB F000      00772         MOVFF   PLUSW2, r0x01
                      00773 ;       .line   84; rtc.c       SCL_OFF();
000020 EE0F F082      00774         LFSR    0x00, 0xf82
000024 CFEF F000      00775         MOVFF   INDF0, r0x02
000028 96??           00776         BCF     r0x02, 3
00002A EE0F F082      00777         LFSR    0x00, 0xf82
00002E C??? F???      00778         MOVFF   r0x02, INDF0
                      00779 ;       .line   85; rtc.c       SDA_OFF();
000032 EE0F F082      00780         LFSR    0x00, 0xf82
000036 CFEF F000      00781         MOVFF   INDF0, r0x02
00003A 98??           00782         BCF     r0x02, 4
00003C EE0F F082      00783         LFSR    0x00, 0xf82
000040 C??? F???      00784         MOVFF   r0x02, INDF0
                      00785 ;       .line   90; rtc.c       addr <<= 1;   //corrige endere?o
000044 90D8           00786         BCF     STATUS, 0
000046 36??           00787         RLCF    r0x00, F
                      00788 ;       .line   91; rtc.c       addr |= 0x80; //habilita clock
000048 8E??           00789         BSF     r0x00, 7
                      00790 ;       .line   92; rtc.c       writeByte(addr);
00004A 50??           00791         MOVF    r0x00, W
00004C 6EE5           00792         MOVWF   POSTDEC1
00004E EC?? F0??      00793         CALL    _writeByte
000052 52E6           00794         MOVF    POSTINC1, F
                      00795 ;       .line   93; rtc.c       writeByte(dados);
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE 16


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

000054 50??           00796         MOVF    r0x01, W
000056 6EE5           00797         MOVWF   POSTDEC1
000058 EC?? F0??      00798         CALL    _writeByte
00005C 52E6           00799         MOVF    POSTINC1, F
                      00800 ;       .line   95; rtc.c       SCL_OFF();
00005E EE0F F082      00801         LFSR    0x00, 0xf82
000062 CFEF F000      00802         MOVFF   INDF0, r0x00
000066 96??           00803         BCF     r0x00, 3
000068 EE0F F082      00804         LFSR    0x00, 0xf82
00006C C??? F???      00805         MOVFF   r0x00, INDF0
                      00806 ;       .line   96; rtc.c       SDA_OFF();
000070 EE0F F082      00807         LFSR    0x00, 0xf82
000074 CFEF F000      00808         MOVFF   INDF0, r0x00
000078 98??           00809         BCF     r0x00, 4
00007A EE0F F082      00810         LFSR    0x00, 0xf82
00007E C??? F???      00811         MOVFF   r0x00, INDF0
000082 CFE4 F000      00812         MOVFF   PREINC1, r0x02
000086 CFE4 F000      00813         MOVFF   PREINC1, r0x01
00008A CFE4 F000      00814         MOVFF   PREINC1, r0x00
00008E CFE4 FFD9      00815         MOVFF   PREINC1, FSR2L
000092 0012           00816         RETURN  
                      00817 
                      00818 ; ; Starting pCode block
                      00819 S_rtc__readByte code
000000                00820 _readByte:
                      00821 ;       .line   62; rtc.c       unsigned char readByte() {
000000 CFD9 FFE5      00822         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00823         MOVFF   FSR1L, FSR2L
000008 C??? F???      00824         MOVFF   r0x00, POSTDEC1
00000C C??? F???      00825         MOVFF   r0x01, POSTDEC1
000010 C??? F???      00826         MOVFF   r0x02, POSTDEC1
                      00827 ;       .line   65; rtc.c       dados = 0;
000014 6A??           00828         CLRF    r0x00
                      00829 ;       .line   66; rtc.c       for (i = 0; i < 8; i++) {
000016 6A??           00830         CLRF    r0x01
000018                00831 _00171_DS_:
                      00832 ;       .line   67; rtc.c       SCL_ON();
000018 EE0F F082      00833         LFSR    0x00, 0xf82
00001C CFEF F000      00834         MOVFF   INDF0, r0x02
000020 86??           00835         BSF     r0x02, 3
000022 EE0F F082      00836         LFSR    0x00, 0xf82
000026 C??? F???      00837         MOVFF   r0x02, INDF0
                      00838 ;       .line   68; rtc.c       DELAY();
00002A 0E64           00839         MOVLW   0x64
00002C 010?           00840         BANKSEL _de
00002E 6F??           00841         MOVWF   _de, B
000030                00842 _00167_DS_:
000030 010?           00843         BANKSEL _de
000032 07??           00844         DECF    _de, F, B
000034 010?           00845         BANKSEL _de
000036 51??           00846         MOVF    _de, W, B
000038 E1??           00847         BNZ     _00167_DS_
00003A 0E64           00848         MOVLW   0x64
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE 17


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

00003C 010?           00849         BANKSEL _de
00003E 6F??           00850         MOVWF   _de, B
                      00851 ;       .line   70; rtc.c       dados >>= 1;
000040 90D8           00852         BCF     STATUS, 0
000042 32??           00853         RRCF    r0x00, F
                      00854 ;       .line   72; rtc.c       if (SDA()) {
000044 EE0F F082      00855         LFSR    0x00, 0xf82
000048 CFEF F000      00856         MOVFF   INDF0, r0x02
00004C A8??           00857         BTFSS   r0x02, 4
00004E D???           00858         BRA     _00162_DS_
                      00859 ;       .line   73; rtc.c       dados |= 0x80;
000050 8E??           00860         BSF     r0x00, 7
000052                00861 _00162_DS_:
                      00862 ;       .line   76; rtc.c       SCL_OFF();
000052 EE0F F082      00863         LFSR    0x00, 0xf82
000056 CFEF F000      00864         MOVFF   INDF0, r0x02
00005A 96??           00865         BCF     r0x02, 3
00005C EE0F F082      00866         LFSR    0x00, 0xf82
000060 C??? F???      00867         MOVFF   r0x02, INDF0
                      00868 ;       .line   77; rtc.c       DELAY();
000064 0E64           00869         MOVLW   0x64
000066 010?           00870         BANKSEL _de
000068 6F??           00871         MOVWF   _de, B
00006A                00872 _00170_DS_:
00006A 010?           00873         BANKSEL _de
00006C 07??           00874         DECF    _de, F, B
00006E 010?           00875         BANKSEL _de
000070 51??           00876         MOVF    _de, W, B
000072 E1??           00877         BNZ     _00170_DS_
000074 0E64           00878         MOVLW   0x64
000076 010?           00879         BANKSEL _de
000078 6F??           00880         MOVWF   _de, B
                      00881 ;       .line   66; rtc.c       for (i = 0; i < 8; i++) {
00007A 2A??           00882         INCF    r0x01, F
00007C 0E08           00883         MOVLW   0x08
00007E 5C??           00884         SUBWF   r0x01, W
000080 A0D8           00885         BTFSS   STATUS, 0
000082 D???           00886         BRA     _00171_DS_
                      00887 ;       .line   79; rtc.c       return dados;
000084 50??           00888         MOVF    r0x00, W
000086 CFE4 F000      00889         MOVFF   PREINC1, r0x02
00008A CFE4 F000      00890         MOVFF   PREINC1, r0x01
00008E CFE4 F000      00891         MOVFF   PREINC1, r0x00
000092 CFE4 FFD9      00892         MOVFF   PREINC1, FSR2L
000096 0012           00893         RETURN  
                      00894 
                      00895 ; ; Starting pCode block
                      00896 S_rtc__writeByte        code
000000                00897 _writeByte:
                      00898 ;       .line   41; rtc.c       void writeByte(unsigned char dados) {
000000 CFD9 FFE5      00899         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00900         MOVFF   FSR1L, FSR2L
000008 C??? F???      00901         MOVFF   r0x00, POSTDEC1
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE 18


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

00000C C??? F???      00902         MOVFF   r0x01, POSTDEC1
000010 C??? F???      00903         MOVFF   r0x02, POSTDEC1
000014 0E02           00904         MOVLW   0x02
000016 CFDB F000      00905         MOVFF   PLUSW2, r0x00
                      00906 ;       .line   43; rtc.c       for (i = 0; i < 8; i++) {
00001A 6A??           00907         CLRF    r0x01
00001C                00908 _00127_DS_:
                      00909 ;       .line   45; rtc.c       if (dados & 0x01) {
00001C A0??           00910         BTFSS   r0x00, 0
00001E D???           00911         BRA     _00116_DS_
                      00912 ;       .line   46; rtc.c       SDA_ON();
000020 EE0F F082      00913         LFSR    0x00, 0xf82
000024 CFEF F000      00914         MOVFF   INDF0, r0x02
000028 88??           00915         BSF     r0x02, 4
00002A EE0F F082      00916         LFSR    0x00, 0xf82
00002E C??? F???      00917         MOVFF   r0x02, INDF0
000032 D???           00918         BRA     _00117_DS_
000034                00919 _00116_DS_:
                      00920 ;       .line   48; rtc.c       SDA_OFF();
000034 EE0F F082      00921         LFSR    0x00, 0xf82
000038 CFEF F000      00922         MOVFF   INDF0, r0x02
00003C 98??           00923         BCF     r0x02, 4
00003E EE0F F082      00924         LFSR    0x00, 0xf82
000042 C??? F???      00925         MOVFF   r0x02, INDF0
000046                00926 _00117_DS_:
                      00927 ;       .line   51; rtc.c       dados >>= 1;
000046 90D8           00928         BCF     STATUS, 0
000048 32??           00929         RRCF    r0x00, F
                      00930 ;       .line   53; rtc.c       SCL_ON();
00004A EE0F F082      00931         LFSR    0x00, 0xf82
00004E CFEF F000      00932         MOVFF   INDF0, r0x02
000052 86??           00933         BSF     r0x02, 3
000054 EE0F F082      00934         LFSR    0x00, 0xf82
000058 C??? F???      00935         MOVFF   r0x02, INDF0
                      00936 ;       .line   54; rtc.c       DELAY();
00005C 0E64           00937         MOVLW   0x64
00005E 010?           00938         BANKSEL _de
000060 6F??           00939         MOVWF   _de, B
000062                00940 _00123_DS_:
000062 010?           00941         BANKSEL _de
000064 07??           00942         DECF    _de, F, B
000066 010?           00943         BANKSEL _de
000068 51??           00944         MOVF    _de, W, B
00006A E1??           00945         BNZ     _00123_DS_
                      00946 ;       .line   56; rtc.c       SCL_OFF();
00006C EE0F F082      00947         LFSR    0x00, 0xf82
000070 CFEF F000      00948         MOVFF   INDF0, r0x02
000074 96??           00949         BCF     r0x02, 3
000076 EE0F F082      00950         LFSR    0x00, 0xf82
00007A C??? F???      00951         MOVFF   r0x02, INDF0
                      00952 ;       .line   57; rtc.c       DELAY();
00007E 0E64           00953         MOVLW   0x64
000080 010?           00954         BANKSEL _de
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE 19


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

000082 6F??           00955         MOVWF   _de, B
000084                00956 _00126_DS_:
000084 010?           00957         BANKSEL _de
000086 07??           00958         DECF    _de, F, B
000088 010?           00959         BANKSEL _de
00008A 51??           00960         MOVF    _de, W, B
00008C E1??           00961         BNZ     _00126_DS_
00008E 0E64           00962         MOVLW   0x64
000090 010?           00963         BANKSEL _de
000092 6F??           00964         MOVWF   _de, B
                      00965 ;       .line   43; rtc.c       for (i = 0; i < 8; i++) {
000094 2A??           00966         INCF    r0x01, F
000096 0E08           00967         MOVLW   0x08
000098 5C??           00968         SUBWF   r0x01, W
00009A A0D8           00969         BTFSS   STATUS, 0
00009C D???           00970         BRA     _00127_DS_
00009E CFE4 F000      00971         MOVFF   PREINC1, r0x02
0000A2 CFE4 F000      00972         MOVFF   PREINC1, r0x01
0000A6 CFE4 F000      00973         MOVFF   PREINC1, r0x00
0000AA CFE4 FFD9      00974         MOVFF   PREINC1, FSR2L
0000AE 0012           00975         RETURN  
                      00976 
                      00977 ; ; Starting pCode block
                      00978 S_rtc__rtcStart code
000000                00979 _rtcStart:
                      00980 ;       .line   33; rtc.c       void rtcStart() {
000000 CFD9 FFE5      00981         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      00982         MOVFF   FSR1L, FSR2L
000008 C??? F???      00983         MOVFF   r0x00, POSTDEC1
                      00984 ;       .line   36; rtc.c       SDA_OUT();
00000C EE0F F094      00985         LFSR    0x00, 0xf94
000010 CFEF F000      00986         MOVFF   INDF0, r0x00
000014 98??           00987         BCF     r0x00, 4
000016 EE0F F094      00988         LFSR    0x00, 0xf94
00001A C??? F???      00989         MOVFF   r0x00, INDF0
                      00990 ;       .line   37; rtc.c       SCL_OUT();
00001E EE0F F094      00991         LFSR    0x00, 0xf94
000022 CFEF F000      00992         MOVFF   INDF0, r0x00
000026 96??           00993         BCF     r0x00, 3
000028 EE0F F094      00994         LFSR    0x00, 0xf94
00002C C??? F???      00995         MOVFF   r0x00, INDF0
                      00996 ;       .line   38; rtc.c       BitClr(INTCON2, 7); //liga pull up
000030 EE0F F0F1      00997         LFSR    0x00, 0xff1
000034 CFEF F000      00998         MOVFF   INDF0, r0x00
000038 9E??           00999         BCF     r0x00, 7
00003A EE0F F0F1      01000         LFSR    0x00, 0xff1
00003E C??? F???      01001         MOVFF   r0x00, INDF0
000042 CFE4 F000      01002         MOVFF   PREINC1, r0x00
000046 CFE4 FFD9      01003         MOVFF   PREINC1, FSR2L
00004A 0012           01004         RETURN  
                      01005 
                      01006 ; ; Starting pCode block
                      01007 S_rtc__rtcInit  code
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE 20


LOC    OBJECT CODE    LINE  SOURCE TEXT
  VALUE

000000                01008 _rtcInit:
                      01009 ;       .line   26; rtc.c       void rtcInit() {
000000 CFD9 FFE5      01010         MOVFF   FSR2L, POSTDEC1
000004 CFE1 FFD9      01011         MOVFF   FSR1L, FSR2L
000008 C??? F???      01012         MOVFF   r0x00, POSTDEC1
                      01013 ;       .line   29; rtc.c       SDA_OUT();
00000C EE0F F094      01014         LFSR    0x00, 0xf94
000010 CFEF F000      01015         MOVFF   INDF0, r0x00
000014 98??           01016         BCF     r0x00, 4
000016 EE0F F094      01017         LFSR    0x00, 0xf94
00001A C??? F???      01018         MOVFF   r0x00, INDF0
                      01019 ;       .line   30; rtc.c       SCL_OUT();
00001E EE0F F094      01020         LFSR    0x00, 0xf94
000022 CFEF F000      01021         MOVFF   INDF0, r0x00
000026 96??           01022         BCF     r0x00, 3
000028 EE0F F094      01023         LFSR    0x00, 0xf94
00002C C??? F???      01024         MOVFF   r0x00, INDF0
000030 CFE4 F000      01025         MOVFF   PREINC1, r0x00
000034 CFE4 FFD9      01026         MOVFF   PREINC1, FSR2L
000038 0012           01027         RETURN  
                      01028 
                      01029 
                      01030 
                      01031 ; Statistics:
                      01032 ; code size:     2130 (0x0852) bytes ( 1.63%)
                      01033 ;                1065 (0x0429) words
                      01034 ; udata size:       1 (0x0001) bytes ( 0.08%)
                      01035 ; access size:      3 (0x0003) bytes
                      01036 
                      01037 
                      01038         end
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE 21


SYMBOL TABLE
  LABEL                              TYPE        VALUE         VALUE          VALUE
                                                 (hex)         (dec)          (text)

FSR1L                             CONSTANT      00000FE1           4065
FSR2L                             CONSTANT      00000FD9           4057
INDF0                             CONSTANT      00000FEF           4079
PLUSW2                            CONSTANT      00000FDB           4059
POSTDEC1                          CONSTANT      00000FE5           4069
POSTINC1                          CONSTANT      00000FE6           4070
PREINC1                           CONSTANT      00000FE4           4068
PRODL                             CONSTANT      00000FF3           4083
STATUS                            CONSTANT      00000FD8           4056
WREG                              CONSTANT      00000FE8           4072
_00116_DS_                        ADDRESS       00000034             52
_00117_DS_                        ADDRESS       00000046             70
_00123_DS_                        ADDRESS       00000062             98
_00126_DS_                        ADDRESS       00000084            132
_00127_DS_                        ADDRESS       0000001C             28
_00162_DS_                        ADDRESS       00000052             82
_00167_DS_                        ADDRESS       00000030             48
_00170_DS_                        ADDRESS       0000006A            106
_00171_DS_                        ADDRESS       00000018             24
_00217_DS_                        ADDRESS       00000064            100
_00220_DS_                        ADDRESS       00000074            116
_00223_DS_                        ADDRESS       00000084            132
_00226_DS_                        ADDRESS       00000094            148
__16_BIT                          CONSTANT      00000001              1
__18F4520                         CONSTANT      00000001              1
__ACC_RAM_LOW_END                 CONSTANT      0000007F            127
__ACC_RAM_LOW_START               CONSTANT      00000000              0
__ACTIVE_BANK_ADDR                VARIABLE      FFFFFFFF             -1
__ASSUMED_BANK_ADDR               VARIABLE      FFFFFFFF             -1
__BANK_0                          CONSTANT      00000000              0
__BANK_1                          CONSTANT      00000100            256
__BANK_2                          CONSTANT      00000200            512
__BANK_3                          CONSTANT      00000300            768
__BANK_4                          CONSTANT      00000400           1024
__BANK_5                          CONSTANT      00000500           1280
__BANK_6                          CONSTANT      00000600           1536
__BANK_7                          CONSTANT      00000700           1792
__BANK_8                          CONSTANT      00000800           2048
__BANK_9                          CONSTANT      00000900           2304
__BANK_10                         CONSTANT      00000A00           2560
__BANK_11                         CONSTANT      00000B00           2816
__BANK_12                         CONSTANT      00000C00           3072
__BANK_13                         CONSTANT      00000D00           3328
__BANK_14                         CONSTANT      00000E00           3584
__BANK_15                         CONSTANT      00000F00           3840
__BANK_BITS                       CONSTANT      00000F00           3840
__BANK_FIRST                      CONSTANT      00000000              0
__BANK_INV                        CONSTANT      FFFFFFFF             -1
__BANK_LAST                       CONSTANT      00000F00           3840
__BANK_MASK                       CONSTANT      000000FF            255
__BANK_SHIFT                      CONSTANT      00000008              8
__BANK_SIZE                       CONSTANT      00000100            256
gpasm-1.5.0 #1285 (Sep 12 2016) build/default   5-23-2018  17:04:22         PAGE 22


SYMBOL TABLE
  LABEL                              TYPE        VALUE         VALUE          VALUE
                                                 (hex)         (dec)          (text)

__CODE_END                        CONSTANT      00007FFF          32767
__CODE_START                      CONSTANT      00000000              0
__COMMON_RAM_END                  CONSTANT      0000007F            127
__COMMON_RAM_START                CONSTANT      00000000              0
__CONFIG_END                      CONSTANT      0030000D        3145741
__CONFIG_START                    CONSTANT      00300000        3145728
__EEPROM_END                      CONSTANT      00F000FF       15728895
__EEPROM_START                    CONSTANT      00F00000       15728640
__EXTENDED                        CONSTANT      00000001              1
__GPUTILS_SVN_VERSION             CONSTANT      00000505           1285
__GPUTILS_VERSION_MAJOR           CONSTANT      00000001              1
__GPUTILS_VERSION_MICRO           CONSTANT      00000000              0
__GPUTILS_VERSION_MINOR           CONSTANT      00000005              5
__IDLOCS_END                      CONSTANT      00200007        2097159
__IDLOCS_START                    CONSTANT      00200000        2097152
__NUM_BANKS                       CONSTANT      00000010             16
__VECTOR_INT_HIGH                 CONSTANT      00000008              8
__VECTOR_INT_LOW                  CONSTANT      00000018             24
__VECTOR_RESET                    CONSTANT      00000000              0
__WHILE_LOOP_COUNT_MAX            CONSTANT      000000FF            255
__divuchar                        EXTERNAL      00000000              0
__moduchar                        EXTERNAL      00000000              0
_de                               GLOBAL        00000000              0
_ht1380read                       GLOBAL        00000000              0
_ht1380write                      GLOBAL        00000000              0
_readByte                         GLOBAL        00000000              0
_rtcGetDate                       GLOBAL        00000000              0
_rtcGetDay                        GLOBAL        00000000              0
_rtcGetHours                      GLOBAL        00000000              0
_rtcGetMinutes                    GLOBAL        00000000              0
_rtcGetMonth                      GLOBAL        00000000              0
_rtcGetSeconds                    GLOBAL        00000000              0
_rtcGetYear                       GLOBAL        00000000              0
_rtcInit                          GLOBAL        00000000              0
_rtcPutDate                       GLOBAL        00000000              0
_rtcPutDay                        GLOBAL        00000000              0
_rtcPutHours                      GLOBAL        00000000              0
_rtcPutMinutes                    GLOBAL        00000000              0
_rtcPutMonth                      GLOBAL        00000000              0
_rtcPutSeconds                    GLOBAL        00000000              0
_rtcPutYear                       GLOBAL        00000000              0
_rtcSetDateTime                   GLOBAL        00000000              0
_rtcStart                         GLOBAL        00000000              0
_writeByte                        GLOBAL        00000000              0
r0x00                             STATIC        00000000              0
r0x01                             STATIC        00000001              1
r0x02                             STATIC        00000002              2

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

